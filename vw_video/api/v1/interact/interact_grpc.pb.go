// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.0
// source: v1/interact/interact.proto

package interact

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VideoInteract_VideoUpvote_FullMethodName                = "/video.v1.interact.VideoInteract/VideoUpvote"
	VideoInteract_VideoUpvoteRevert_FullMethodName          = "/video.v1.interact.VideoInteract/VideoUpvoteRevert"
	VideoInteract_VideoFavorite_FullMethodName              = "/video.v1.interact.VideoInteract/VideoFavorite"
	VideoInteract_VideoFavoriteRevert_FullMethodName        = "/video.v1.interact.VideoInteract/VideoFavoriteRevert"
	VideoInteract_VideoThrowShells_FullMethodName           = "/video.v1.interact.VideoInteract/VideoThrowShells"
	VideoInteract_VideoThrowShellsRevert_FullMethodName     = "/video.v1.interact.VideoInteract/VideoThrowShellsRevert"
	VideoInteract_VideoShare_FullMethodName                 = "/video.v1.interact.VideoInteract/VideoShare"
	VideoInteract_VideoSendBarrage_FullMethodName           = "/video.v1.interact.VideoInteract/VideoSendBarrage"
	VideoInteract_BarrageUpvote_FullMethodName              = "/video.v1.interact.VideoInteract/BarrageUpvote"
	VideoInteract_BarrageUpvoteRevert_FullMethodName        = "/video.v1.interact.VideoInteract/BarrageUpvoteRevert"
	VideoInteract_GetUserVideoStatus_FullMethodName         = "/video.v1.interact.VideoInteract/GetUserVideoStatus"
	VideoInteract_GetUserBarrageStatus_FullMethodName       = "/video.v1.interact.VideoInteract/GetUserBarrageStatus"
	VideoInteract_SetUserVideoStatus_FullMethodName         = "/video.v1.interact.VideoInteract/SetUserVideoStatus"
	VideoInteract_SetUserVideoStatusRevert_FullMethodName   = "/video.v1.interact.VideoInteract/SetUserVideoStatusRevert"
	VideoInteract_SetUserBarrageStatus_FullMethodName       = "/video.v1.interact.VideoInteract/SetUserBarrageStatus"
	VideoInteract_SetUserBarrageStatusRevert_FullMethodName = "/video.v1.interact.VideoInteract/SetUserBarrageStatusRevert"
)

// VideoInteractClient is the client API for VideoInteract service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoInteractClient interface {
	// NOTE: if the method's SUFFIX is 'Revert',
	// which indicates that it is the compensating method for some operations,
	// used by DTM saga transaction.
	VideoUpvote(ctx context.Context, in *VideoUpvoteReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VideoUpvoteRevert(ctx context.Context, in *VideoUpvoteReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VideoFavorite(ctx context.Context, in *VideoFavoriteReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VideoFavoriteRevert(ctx context.Context, in *VideoFavoriteReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VideoThrowShells(ctx context.Context, in *VideoThrowShellsReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VideoThrowShellsRevert(ctx context.Context, in *VideoThrowShellsReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VideoShare(ctx context.Context, in *VideoShareReq, opts ...grpc.CallOption) (*VideoShareResp, error)
	VideoSendBarrage(ctx context.Context, in *VideoSendBarrageReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BarrageUpvote(ctx context.Context, in *UpvoteBarrageReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BarrageUpvoteRevert(ctx context.Context, in *UpvoteBarrageReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUserVideoStatus(ctx context.Context, in *GetUserVideoStatusReq, opts ...grpc.CallOption) (*GetUserVideoStatusResp, error)
	GetUserBarrageStatus(ctx context.Context, in *GetUserBarrageStatusReq, opts ...grpc.CallOption) (*GetUserBarrageStatusResp, error)
	SetUserVideoStatus(ctx context.Context, in *SetUserVideoStatusReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetUserVideoStatusRevert(ctx context.Context, in *SetUserVideoStatusReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetUserBarrageStatus(ctx context.Context, in *SetUserBarrageStatusReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetUserBarrageStatusRevert(ctx context.Context, in *SetUserBarrageStatusReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type videoInteractClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoInteractClient(cc grpc.ClientConnInterface) VideoInteractClient {
	return &videoInteractClient{cc}
}

func (c *videoInteractClient) VideoUpvote(ctx context.Context, in *VideoUpvoteReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VideoInteract_VideoUpvote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoInteractClient) VideoUpvoteRevert(ctx context.Context, in *VideoUpvoteReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VideoInteract_VideoUpvoteRevert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoInteractClient) VideoFavorite(ctx context.Context, in *VideoFavoriteReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VideoInteract_VideoFavorite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoInteractClient) VideoFavoriteRevert(ctx context.Context, in *VideoFavoriteReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VideoInteract_VideoFavoriteRevert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoInteractClient) VideoThrowShells(ctx context.Context, in *VideoThrowShellsReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VideoInteract_VideoThrowShells_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoInteractClient) VideoThrowShellsRevert(ctx context.Context, in *VideoThrowShellsReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VideoInteract_VideoThrowShellsRevert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoInteractClient) VideoShare(ctx context.Context, in *VideoShareReq, opts ...grpc.CallOption) (*VideoShareResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VideoShareResp)
	err := c.cc.Invoke(ctx, VideoInteract_VideoShare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoInteractClient) VideoSendBarrage(ctx context.Context, in *VideoSendBarrageReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VideoInteract_VideoSendBarrage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoInteractClient) BarrageUpvote(ctx context.Context, in *UpvoteBarrageReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VideoInteract_BarrageUpvote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoInteractClient) BarrageUpvoteRevert(ctx context.Context, in *UpvoteBarrageReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VideoInteract_BarrageUpvoteRevert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoInteractClient) GetUserVideoStatus(ctx context.Context, in *GetUserVideoStatusReq, opts ...grpc.CallOption) (*GetUserVideoStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserVideoStatusResp)
	err := c.cc.Invoke(ctx, VideoInteract_GetUserVideoStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoInteractClient) GetUserBarrageStatus(ctx context.Context, in *GetUserBarrageStatusReq, opts ...grpc.CallOption) (*GetUserBarrageStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserBarrageStatusResp)
	err := c.cc.Invoke(ctx, VideoInteract_GetUserBarrageStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoInteractClient) SetUserVideoStatus(ctx context.Context, in *SetUserVideoStatusReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VideoInteract_SetUserVideoStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoInteractClient) SetUserVideoStatusRevert(ctx context.Context, in *SetUserVideoStatusReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VideoInteract_SetUserVideoStatusRevert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoInteractClient) SetUserBarrageStatus(ctx context.Context, in *SetUserBarrageStatusReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VideoInteract_SetUserBarrageStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoInteractClient) SetUserBarrageStatusRevert(ctx context.Context, in *SetUserBarrageStatusReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VideoInteract_SetUserBarrageStatusRevert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoInteractServer is the server API for VideoInteract service.
// All implementations must embed UnimplementedVideoInteractServer
// for forward compatibility.
type VideoInteractServer interface {
	// NOTE: if the method's SUFFIX is 'Revert',
	// which indicates that it is the compensating method for some operations,
	// used by DTM saga transaction.
	VideoUpvote(context.Context, *VideoUpvoteReq) (*emptypb.Empty, error)
	VideoUpvoteRevert(context.Context, *VideoUpvoteReq) (*emptypb.Empty, error)
	VideoFavorite(context.Context, *VideoFavoriteReq) (*emptypb.Empty, error)
	VideoFavoriteRevert(context.Context, *VideoFavoriteReq) (*emptypb.Empty, error)
	VideoThrowShells(context.Context, *VideoThrowShellsReq) (*emptypb.Empty, error)
	VideoThrowShellsRevert(context.Context, *VideoThrowShellsReq) (*emptypb.Empty, error)
	VideoShare(context.Context, *VideoShareReq) (*VideoShareResp, error)
	VideoSendBarrage(context.Context, *VideoSendBarrageReq) (*emptypb.Empty, error)
	BarrageUpvote(context.Context, *UpvoteBarrageReq) (*emptypb.Empty, error)
	BarrageUpvoteRevert(context.Context, *UpvoteBarrageReq) (*emptypb.Empty, error)
	GetUserVideoStatus(context.Context, *GetUserVideoStatusReq) (*GetUserVideoStatusResp, error)
	GetUserBarrageStatus(context.Context, *GetUserBarrageStatusReq) (*GetUserBarrageStatusResp, error)
	SetUserVideoStatus(context.Context, *SetUserVideoStatusReq) (*emptypb.Empty, error)
	SetUserVideoStatusRevert(context.Context, *SetUserVideoStatusReq) (*emptypb.Empty, error)
	SetUserBarrageStatus(context.Context, *SetUserBarrageStatusReq) (*emptypb.Empty, error)
	SetUserBarrageStatusRevert(context.Context, *SetUserBarrageStatusReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedVideoInteractServer()
}

// UnimplementedVideoInteractServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVideoInteractServer struct{}

func (UnimplementedVideoInteractServer) VideoUpvote(context.Context, *VideoUpvoteReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoUpvote not implemented")
}
func (UnimplementedVideoInteractServer) VideoUpvoteRevert(context.Context, *VideoUpvoteReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoUpvoteRevert not implemented")
}
func (UnimplementedVideoInteractServer) VideoFavorite(context.Context, *VideoFavoriteReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoFavorite not implemented")
}
func (UnimplementedVideoInteractServer) VideoFavoriteRevert(context.Context, *VideoFavoriteReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoFavoriteRevert not implemented")
}
func (UnimplementedVideoInteractServer) VideoThrowShells(context.Context, *VideoThrowShellsReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoThrowShells not implemented")
}
func (UnimplementedVideoInteractServer) VideoThrowShellsRevert(context.Context, *VideoThrowShellsReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoThrowShellsRevert not implemented")
}
func (UnimplementedVideoInteractServer) VideoShare(context.Context, *VideoShareReq) (*VideoShareResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoShare not implemented")
}
func (UnimplementedVideoInteractServer) VideoSendBarrage(context.Context, *VideoSendBarrageReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoSendBarrage not implemented")
}
func (UnimplementedVideoInteractServer) BarrageUpvote(context.Context, *UpvoteBarrageReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BarrageUpvote not implemented")
}
func (UnimplementedVideoInteractServer) BarrageUpvoteRevert(context.Context, *UpvoteBarrageReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BarrageUpvoteRevert not implemented")
}
func (UnimplementedVideoInteractServer) GetUserVideoStatus(context.Context, *GetUserVideoStatusReq) (*GetUserVideoStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserVideoStatus not implemented")
}
func (UnimplementedVideoInteractServer) GetUserBarrageStatus(context.Context, *GetUserBarrageStatusReq) (*GetUserBarrageStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBarrageStatus not implemented")
}
func (UnimplementedVideoInteractServer) SetUserVideoStatus(context.Context, *SetUserVideoStatusReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserVideoStatus not implemented")
}
func (UnimplementedVideoInteractServer) SetUserVideoStatusRevert(context.Context, *SetUserVideoStatusReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserVideoStatusRevert not implemented")
}
func (UnimplementedVideoInteractServer) SetUserBarrageStatus(context.Context, *SetUserBarrageStatusReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserBarrageStatus not implemented")
}
func (UnimplementedVideoInteractServer) SetUserBarrageStatusRevert(context.Context, *SetUserBarrageStatusReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserBarrageStatusRevert not implemented")
}
func (UnimplementedVideoInteractServer) mustEmbedUnimplementedVideoInteractServer() {}
func (UnimplementedVideoInteractServer) testEmbeddedByValue()                       {}

// UnsafeVideoInteractServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoInteractServer will
// result in compilation errors.
type UnsafeVideoInteractServer interface {
	mustEmbedUnimplementedVideoInteractServer()
}

func RegisterVideoInteractServer(s grpc.ServiceRegistrar, srv VideoInteractServer) {
	// If the following call pancis, it indicates UnimplementedVideoInteractServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VideoInteract_ServiceDesc, srv)
}

func _VideoInteract_VideoUpvote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoUpvoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInteractServer).VideoUpvote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInteract_VideoUpvote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInteractServer).VideoUpvote(ctx, req.(*VideoUpvoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoInteract_VideoUpvoteRevert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoUpvoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInteractServer).VideoUpvoteRevert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInteract_VideoUpvoteRevert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInteractServer).VideoUpvoteRevert(ctx, req.(*VideoUpvoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoInteract_VideoFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoFavoriteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInteractServer).VideoFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInteract_VideoFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInteractServer).VideoFavorite(ctx, req.(*VideoFavoriteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoInteract_VideoFavoriteRevert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoFavoriteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInteractServer).VideoFavoriteRevert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInteract_VideoFavoriteRevert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInteractServer).VideoFavoriteRevert(ctx, req.(*VideoFavoriteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoInteract_VideoThrowShells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoThrowShellsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInteractServer).VideoThrowShells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInteract_VideoThrowShells_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInteractServer).VideoThrowShells(ctx, req.(*VideoThrowShellsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoInteract_VideoThrowShellsRevert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoThrowShellsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInteractServer).VideoThrowShellsRevert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInteract_VideoThrowShellsRevert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInteractServer).VideoThrowShellsRevert(ctx, req.(*VideoThrowShellsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoInteract_VideoShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoShareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInteractServer).VideoShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInteract_VideoShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInteractServer).VideoShare(ctx, req.(*VideoShareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoInteract_VideoSendBarrage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoSendBarrageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInteractServer).VideoSendBarrage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInteract_VideoSendBarrage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInteractServer).VideoSendBarrage(ctx, req.(*VideoSendBarrageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoInteract_BarrageUpvote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpvoteBarrageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInteractServer).BarrageUpvote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInteract_BarrageUpvote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInteractServer).BarrageUpvote(ctx, req.(*UpvoteBarrageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoInteract_BarrageUpvoteRevert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpvoteBarrageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInteractServer).BarrageUpvoteRevert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInteract_BarrageUpvoteRevert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInteractServer).BarrageUpvoteRevert(ctx, req.(*UpvoteBarrageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoInteract_GetUserVideoStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserVideoStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInteractServer).GetUserVideoStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInteract_GetUserVideoStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInteractServer).GetUserVideoStatus(ctx, req.(*GetUserVideoStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoInteract_GetUserBarrageStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBarrageStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInteractServer).GetUserBarrageStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInteract_GetUserBarrageStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInteractServer).GetUserBarrageStatus(ctx, req.(*GetUserBarrageStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoInteract_SetUserVideoStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserVideoStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInteractServer).SetUserVideoStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInteract_SetUserVideoStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInteractServer).SetUserVideoStatus(ctx, req.(*SetUserVideoStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoInteract_SetUserVideoStatusRevert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserVideoStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInteractServer).SetUserVideoStatusRevert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInteract_SetUserVideoStatusRevert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInteractServer).SetUserVideoStatusRevert(ctx, req.(*SetUserVideoStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoInteract_SetUserBarrageStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserBarrageStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInteractServer).SetUserBarrageStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInteract_SetUserBarrageStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInteractServer).SetUserBarrageStatus(ctx, req.(*SetUserBarrageStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoInteract_SetUserBarrageStatusRevert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserBarrageStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInteractServer).SetUserBarrageStatusRevert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInteract_SetUserBarrageStatusRevert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInteractServer).SetUserBarrageStatusRevert(ctx, req.(*SetUserBarrageStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoInteract_ServiceDesc is the grpc.ServiceDesc for VideoInteract service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoInteract_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "video.v1.interact.VideoInteract",
	HandlerType: (*VideoInteractServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VideoUpvote",
			Handler:    _VideoInteract_VideoUpvote_Handler,
		},
		{
			MethodName: "VideoUpvoteRevert",
			Handler:    _VideoInteract_VideoUpvoteRevert_Handler,
		},
		{
			MethodName: "VideoFavorite",
			Handler:    _VideoInteract_VideoFavorite_Handler,
		},
		{
			MethodName: "VideoFavoriteRevert",
			Handler:    _VideoInteract_VideoFavoriteRevert_Handler,
		},
		{
			MethodName: "VideoThrowShells",
			Handler:    _VideoInteract_VideoThrowShells_Handler,
		},
		{
			MethodName: "VideoThrowShellsRevert",
			Handler:    _VideoInteract_VideoThrowShellsRevert_Handler,
		},
		{
			MethodName: "VideoShare",
			Handler:    _VideoInteract_VideoShare_Handler,
		},
		{
			MethodName: "VideoSendBarrage",
			Handler:    _VideoInteract_VideoSendBarrage_Handler,
		},
		{
			MethodName: "BarrageUpvote",
			Handler:    _VideoInteract_BarrageUpvote_Handler,
		},
		{
			MethodName: "BarrageUpvoteRevert",
			Handler:    _VideoInteract_BarrageUpvoteRevert_Handler,
		},
		{
			MethodName: "GetUserVideoStatus",
			Handler:    _VideoInteract_GetUserVideoStatus_Handler,
		},
		{
			MethodName: "GetUserBarrageStatus",
			Handler:    _VideoInteract_GetUserBarrageStatus_Handler,
		},
		{
			MethodName: "SetUserVideoStatus",
			Handler:    _VideoInteract_SetUserVideoStatus_Handler,
		},
		{
			MethodName: "SetUserVideoStatusRevert",
			Handler:    _VideoInteract_SetUserVideoStatusRevert_Handler,
		},
		{
			MethodName: "SetUserBarrageStatus",
			Handler:    _VideoInteract_SetUserBarrageStatus_Handler,
		},
		{
			MethodName: "SetUserBarrageStatusRevert",
			Handler:    _VideoInteract_SetUserBarrageStatusRevert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/interact/interact.proto",
}
