// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.0
// source: v1/interact/interact.proto

package interact

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VideoUpvoteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoId    int64 `protobuf:"varint,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	UpvoteFlag int32 `protobuf:"varint,2,opt,name=upvote_flag,json=upvoteFlag,proto3" json:"upvote_flag,omitempty"` // 1: Upvote, -1: Cancel upvote
}

func (x *VideoUpvoteReq) Reset() {
	*x = VideoUpvoteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_interact_interact_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoUpvoteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoUpvoteReq) ProtoMessage() {}

func (x *VideoUpvoteReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_interact_interact_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoUpvoteReq.ProtoReflect.Descriptor instead.
func (*VideoUpvoteReq) Descriptor() ([]byte, []int) {
	return file_v1_interact_interact_proto_rawDescGZIP(), []int{0}
}

func (x *VideoUpvoteReq) GetVideoId() int64 {
	if x != nil {
		return x.VideoId
	}
	return 0
}

func (x *VideoUpvoteReq) GetUpvoteFlag() int32 {
	if x != nil {
		return x.UpvoteFlag
	}
	return 0
}

type VideoFavoriteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoId    int64 `protobuf:"varint,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	FavoriteId int64 `protobuf:"varint,2,opt,name=favorite_id,json=favoriteId,proto3" json:"favorite_id,omitempty"`
	Favorite   int32 `protobuf:"varint,3,opt,name=favorite,proto3" json:"favorite,omitempty"` // 1: Favorite, -1: Cancel favorite
}

func (x *VideoFavoriteReq) Reset() {
	*x = VideoFavoriteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_interact_interact_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoFavoriteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoFavoriteReq) ProtoMessage() {}

func (x *VideoFavoriteReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_interact_interact_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoFavoriteReq.ProtoReflect.Descriptor instead.
func (*VideoFavoriteReq) Descriptor() ([]byte, []int) {
	return file_v1_interact_interact_proto_rawDescGZIP(), []int{1}
}

func (x *VideoFavoriteReq) GetVideoId() int64 {
	if x != nil {
		return x.VideoId
	}
	return 0
}

func (x *VideoFavoriteReq) GetFavoriteId() int64 {
	if x != nil {
		return x.FavoriteId
	}
	return 0
}

func (x *VideoFavoriteReq) GetFavorite() int32 {
	if x != nil {
		return x.Favorite
	}
	return 0
}

type VideoThrowShellsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoId int64 `protobuf:"varint,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	UserId  int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Shells  int32 `protobuf:"varint,3,opt,name=shells,proto3" json:"shells,omitempty"`
}

func (x *VideoThrowShellsReq) Reset() {
	*x = VideoThrowShellsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_interact_interact_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoThrowShellsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoThrowShellsReq) ProtoMessage() {}

func (x *VideoThrowShellsReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_interact_interact_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoThrowShellsReq.ProtoReflect.Descriptor instead.
func (*VideoThrowShellsReq) Descriptor() ([]byte, []int) {
	return file_v1_interact_interact_proto_rawDescGZIP(), []int{2}
}

func (x *VideoThrowShellsReq) GetVideoId() int64 {
	if x != nil {
		return x.VideoId
	}
	return 0
}

func (x *VideoThrowShellsReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *VideoThrowShellsReq) GetShells() int32 {
	if x != nil {
		return x.Shells
	}
	return 0
}

type VideoShareReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoId  int64 `protobuf:"varint,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	IsShared int32 `protobuf:"varint,2,opt,name=is_shared,json=isShared,proto3" json:"is_shared,omitempty"` // 1: Share, -1: Not shared before
}

func (x *VideoShareReq) Reset() {
	*x = VideoShareReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_interact_interact_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoShareReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoShareReq) ProtoMessage() {}

func (x *VideoShareReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_interact_interact_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoShareReq.ProtoReflect.Descriptor instead.
func (*VideoShareReq) Descriptor() ([]byte, []int) {
	return file_v1_interact_interact_proto_rawDescGZIP(), []int{3}
}

func (x *VideoShareReq) GetVideoId() int64 {
	if x != nil {
		return x.VideoId
	}
	return 0
}

func (x *VideoShareReq) GetIsShared() int32 {
	if x != nil {
		return x.IsShared
	}
	return 0
}

type VideoShareResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *VideoShareResp) Reset() {
	*x = VideoShareResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_interact_interact_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoShareResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoShareResp) ProtoMessage() {}

func (x *VideoShareResp) ProtoReflect() protoreflect.Message {
	mi := &file_v1_interact_interact_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoShareResp.ProtoReflect.Descriptor instead.
func (*VideoShareResp) Descriptor() ([]byte, []int) {
	return file_v1_interact_interact_proto_rawDescGZIP(), []int{4}
}

func (x *VideoShareResp) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type VideoSendBarrageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublisherId int64  `protobuf:"varint,1,opt,name=publisher_id,json=publisherId,proto3" json:"publisher_id,omitempty"`
	VideoId     int64  `protobuf:"varint,2,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	Content     string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Time        string `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"` // user sends this barrage at hh:mm:ss of the video
	Color       string `protobuf:"bytes,5,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *VideoSendBarrageReq) Reset() {
	*x = VideoSendBarrageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_interact_interact_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoSendBarrageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoSendBarrageReq) ProtoMessage() {}

func (x *VideoSendBarrageReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_interact_interact_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoSendBarrageReq.ProtoReflect.Descriptor instead.
func (*VideoSendBarrageReq) Descriptor() ([]byte, []int) {
	return file_v1_interact_interact_proto_rawDescGZIP(), []int{5}
}

func (x *VideoSendBarrageReq) GetPublisherId() int64 {
	if x != nil {
		return x.PublisherId
	}
	return 0
}

func (x *VideoSendBarrageReq) GetVideoId() int64 {
	if x != nil {
		return x.VideoId
	}
	return 0
}

func (x *VideoSendBarrageReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *VideoSendBarrageReq) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *VideoSendBarrageReq) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

type UpvoteBarrageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BarrageId int64 `protobuf:"varint,1,opt,name=barrage_id,json=barrageId,proto3" json:"barrage_id,omitempty"`
	UserId    int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// upvote has two possible values:
	// 1: This Barrage is upvoted by user before, so we Cancel upvote,
	// -1: This Barrage is not upvoted by user yet, so we upvote.
	Upvote int32 `protobuf:"varint,3,opt,name=upvote,proto3" json:"upvote,omitempty"`
}

func (x *UpvoteBarrageReq) Reset() {
	*x = UpvoteBarrageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_interact_interact_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpvoteBarrageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpvoteBarrageReq) ProtoMessage() {}

func (x *UpvoteBarrageReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_interact_interact_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpvoteBarrageReq.ProtoReflect.Descriptor instead.
func (*UpvoteBarrageReq) Descriptor() ([]byte, []int) {
	return file_v1_interact_interact_proto_rawDescGZIP(), []int{6}
}

func (x *UpvoteBarrageReq) GetBarrageId() int64 {
	if x != nil {
		return x.BarrageId
	}
	return 0
}

func (x *UpvoteBarrageReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpvoteBarrageReq) GetUpvote() int32 {
	if x != nil {
		return x.Upvote
	}
	return 0
}

type GetUserVideoStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoId int64 `protobuf:"varint,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	UserId  int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetUserVideoStatusReq) Reset() {
	*x = GetUserVideoStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_interact_interact_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserVideoStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserVideoStatusReq) ProtoMessage() {}

func (x *GetUserVideoStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_interact_interact_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserVideoStatusReq.ProtoReflect.Descriptor instead.
func (*GetUserVideoStatusReq) Descriptor() ([]byte, []int) {
	return file_v1_interact_interact_proto_rawDescGZIP(), []int{7}
}

func (x *GetUserVideoStatusReq) GetVideoId() int64 {
	if x != nil {
		return x.VideoId
	}
	return 0
}

func (x *GetUserVideoStatusReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetUserVideoStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      int64 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	ShellsCount int32 `protobuf:"varint,2,opt,name=shells_count,json=shellsCount,proto3" json:"shells_count,omitempty"`
}

func (x *GetUserVideoStatusResp) Reset() {
	*x = GetUserVideoStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_interact_interact_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserVideoStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserVideoStatusResp) ProtoMessage() {}

func (x *GetUserVideoStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_v1_interact_interact_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserVideoStatusResp.ProtoReflect.Descriptor instead.
func (*GetUserVideoStatusResp) Descriptor() ([]byte, []int) {
	return file_v1_interact_interact_proto_rawDescGZIP(), []int{8}
}

func (x *GetUserVideoStatusResp) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetUserVideoStatusResp) GetShellsCount() int32 {
	if x != nil {
		return x.ShellsCount
	}
	return 0
}

type GetUserBarrageStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BarrageId int64 `protobuf:"varint,1,opt,name=barrage_id,json=barrageId,proto3" json:"barrage_id,omitempty"`
	UserId    int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetUserBarrageStatusReq) Reset() {
	*x = GetUserBarrageStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_interact_interact_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserBarrageStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserBarrageStatusReq) ProtoMessage() {}

func (x *GetUserBarrageStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_interact_interact_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserBarrageStatusReq.ProtoReflect.Descriptor instead.
func (*GetUserBarrageStatusReq) Descriptor() ([]byte, []int) {
	return file_v1_interact_interact_proto_rawDescGZIP(), []int{9}
}

func (x *GetUserBarrageStatusReq) GetBarrageId() int64 {
	if x != nil {
		return x.BarrageId
	}
	return 0
}

func (x *GetUserBarrageStatusReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetUserBarrageStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int64 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetUserBarrageStatusResp) Reset() {
	*x = GetUserBarrageStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_interact_interact_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserBarrageStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserBarrageStatusResp) ProtoMessage() {}

func (x *GetUserBarrageStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_v1_interact_interact_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserBarrageStatusResp.ProtoReflect.Descriptor instead.
func (*GetUserBarrageStatusResp) Descriptor() ([]byte, []int) {
	return file_v1_interact_interact_proto_rawDescGZIP(), []int{10}
}

func (x *GetUserBarrageStatusResp) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

type SetUserVideoStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoId      int64                           `protobuf:"varint,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	UserId       int64                           `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OriginStatus int64                           `protobuf:"varint,3,opt,name=origin_status,json=originStatus,proto3" json:"origin_status,omitempty"`
	ShellsCount  int32                           `protobuf:"varint,4,opt,name=shells_count,json=shellsCount,proto3" json:"shells_count,omitempty"`
	Statuses     *SetUserVideoStatusReq_Statuses `protobuf:"bytes,5,opt,name=statuses,proto3" json:"statuses,omitempty"`
}

func (x *SetUserVideoStatusReq) Reset() {
	*x = SetUserVideoStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_interact_interact_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserVideoStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserVideoStatusReq) ProtoMessage() {}

func (x *SetUserVideoStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_interact_interact_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserVideoStatusReq.ProtoReflect.Descriptor instead.
func (*SetUserVideoStatusReq) Descriptor() ([]byte, []int) {
	return file_v1_interact_interact_proto_rawDescGZIP(), []int{11}
}

func (x *SetUserVideoStatusReq) GetVideoId() int64 {
	if x != nil {
		return x.VideoId
	}
	return 0
}

func (x *SetUserVideoStatusReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SetUserVideoStatusReq) GetOriginStatus() int64 {
	if x != nil {
		return x.OriginStatus
	}
	return 0
}

func (x *SetUserVideoStatusReq) GetShellsCount() int32 {
	if x != nil {
		return x.ShellsCount
	}
	return 0
}

func (x *SetUserVideoStatusReq) GetStatuses() *SetUserVideoStatusReq_Statuses {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type SetUserBarrageStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BarrageId    int64                             `protobuf:"varint,1,opt,name=barrage_id,json=barrageId,proto3" json:"barrage_id,omitempty"`
	UserId       int64                             `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OriginStatus int64                             `protobuf:"varint,3,opt,name=origin_status,json=originStatus,proto3" json:"origin_status,omitempty"`
	Statuses     *SetUserBarrageStatusReq_Statuses `protobuf:"bytes,4,opt,name=statuses,proto3" json:"statuses,omitempty"`
}

func (x *SetUserBarrageStatusReq) Reset() {
	*x = SetUserBarrageStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_interact_interact_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserBarrageStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserBarrageStatusReq) ProtoMessage() {}

func (x *SetUserBarrageStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_interact_interact_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserBarrageStatusReq.ProtoReflect.Descriptor instead.
func (*SetUserBarrageStatusReq) Descriptor() ([]byte, []int) {
	return file_v1_interact_interact_proto_rawDescGZIP(), []int{12}
}

func (x *SetUserBarrageStatusReq) GetBarrageId() int64 {
	if x != nil {
		return x.BarrageId
	}
	return 0
}

func (x *SetUserBarrageStatusReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SetUserBarrageStatusReq) GetOriginStatus() int64 {
	if x != nil {
		return x.OriginStatus
	}
	return 0
}

func (x *SetUserBarrageStatusReq) GetStatuses() *SetUserBarrageStatusReq_Statuses {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type SetUserVideoStatusReq_Statuses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsUpvoted      int32 `protobuf:"varint,1,opt,name=is_upvoted,json=isUpvoted,proto3" json:"is_upvoted,omitempty"`                  // 1: Set to upvoted, -1: Set to not upvoted
	IsFavorited    int32 `protobuf:"varint,2,opt,name=is_favorited,json=isFavorited,proto3" json:"is_favorited,omitempty"`            // 1: Set to favorited, -1: Set to not favorited
	IsThrownShells int32 `protobuf:"varint,3,opt,name=is_thrown_shells,json=isThrownShells,proto3" json:"is_thrown_shells,omitempty"` // 1: Set to thrown shells, -1: Set to not thrown shells
	IsShared       int32 `protobuf:"varint,4,opt,name=is_shared,json=isShared,proto3" json:"is_shared,omitempty"`                     // 1: Set to shared, -1: Set to not shared
}

func (x *SetUserVideoStatusReq_Statuses) Reset() {
	*x = SetUserVideoStatusReq_Statuses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_interact_interact_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserVideoStatusReq_Statuses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserVideoStatusReq_Statuses) ProtoMessage() {}

func (x *SetUserVideoStatusReq_Statuses) ProtoReflect() protoreflect.Message {
	mi := &file_v1_interact_interact_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserVideoStatusReq_Statuses.ProtoReflect.Descriptor instead.
func (*SetUserVideoStatusReq_Statuses) Descriptor() ([]byte, []int) {
	return file_v1_interact_interact_proto_rawDescGZIP(), []int{11, 0}
}

func (x *SetUserVideoStatusReq_Statuses) GetIsUpvoted() int32 {
	if x != nil {
		return x.IsUpvoted
	}
	return 0
}

func (x *SetUserVideoStatusReq_Statuses) GetIsFavorited() int32 {
	if x != nil {
		return x.IsFavorited
	}
	return 0
}

func (x *SetUserVideoStatusReq_Statuses) GetIsThrownShells() int32 {
	if x != nil {
		return x.IsThrownShells
	}
	return 0
}

func (x *SetUserVideoStatusReq_Statuses) GetIsShared() int32 {
	if x != nil {
		return x.IsShared
	}
	return 0
}

type SetUserBarrageStatusReq_Statuses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 1: This Barrage is upvoted by user before, so we set it to not upvoted,
	// -1: This Barrage is not upvoted by user yet, so we set it to upvoted
	IsUpvoted int32 `protobuf:"varint,1,opt,name=is_upvoted,json=isUpvoted,proto3" json:"is_upvoted,omitempty"`
}

func (x *SetUserBarrageStatusReq_Statuses) Reset() {
	*x = SetUserBarrageStatusReq_Statuses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_interact_interact_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserBarrageStatusReq_Statuses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserBarrageStatusReq_Statuses) ProtoMessage() {}

func (x *SetUserBarrageStatusReq_Statuses) ProtoReflect() protoreflect.Message {
	mi := &file_v1_interact_interact_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserBarrageStatusReq_Statuses.ProtoReflect.Descriptor instead.
func (*SetUserBarrageStatusReq_Statuses) Descriptor() ([]byte, []int) {
	return file_v1_interact_interact_proto_rawDescGZIP(), []int{12, 0}
}

func (x *SetUserBarrageStatusReq_Statuses) GetIsUpvoted() int32 {
	if x != nil {
		return x.IsUpvoted
	}
	return 0
}

var File_v1_interact_interact_proto protoreflect.FileDescriptor

var file_v1_interact_interact_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4c, 0x0a, 0x0e,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x19,
	0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x76,
	0x6f, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x6a, 0x0a, 0x10, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x19,
	0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x22, 0x61, 0x0a, 0x13, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54,
	0x68, 0x72, 0x6f, 0x77, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a,
	0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x22, 0x47, 0x0a, 0x0d, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x22, 0x22, 0x0a, 0x0e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0x97, 0x01, 0x0a, 0x13, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x53, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x22, 0x62, 0x0a, 0x10, 0x55, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x70,
	0x76, 0x6f, 0x74, 0x65, 0x22, 0x4b, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a,
	0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x53, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x68, 0x65, 0x6c, 0x6c,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x51, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf8, 0x02,
	0x0a, 0x15, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x1a, 0x93, 0x01, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73, 0x55, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x6e, 0x5f, 0x73,
	0x68, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x73, 0x54,
	0x68, 0x72, 0x6f, 0x77, 0x6e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x69, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x22, 0xf2, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x4f, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x1a, 0x29, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x69, 0x73, 0x55, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x32, 0xb2, 0x0b,
	0x0a, 0x0d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x4a, 0x0a, 0x0b, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x12, 0x21,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x11, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74,
	0x12, 0x21, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x76, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a,
	0x0d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x23,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x54, 0x0a,
	0x13, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x74, 0x12, 0x23, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x10, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x68, 0x72, 0x6f,
	0x77, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x26, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x16, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x74, 0x12, 0x26, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x68, 0x72,
	0x6f, 0x77, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0a, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x12, 0x20, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x10, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x12, 0x26,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x72, 0x72,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x4e, 0x0a, 0x0d, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x55, 0x70, 0x76, 0x6f, 0x74,
	0x65, 0x12, 0x23, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x55, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x42, 0x61, 0x72, 0x72,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x54, 0x0a, 0x13, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x55, 0x70, 0x76, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x12, 0x23, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x55, 0x70, 0x76, 0x6f,
	0x74, 0x65, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61,
	0x72, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x5e, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x12, 0x28, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x5c, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x72, 0x72, 0x61,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x53, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x62,
	0x0a, 0x1a, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x12, 0x2a, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x42, 0x29, 0x5a, 0x27, 0x76, 0x77, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x3b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_interact_interact_proto_rawDescOnce sync.Once
	file_v1_interact_interact_proto_rawDescData = file_v1_interact_interact_proto_rawDesc
)

func file_v1_interact_interact_proto_rawDescGZIP() []byte {
	file_v1_interact_interact_proto_rawDescOnce.Do(func() {
		file_v1_interact_interact_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_interact_interact_proto_rawDescData)
	})
	return file_v1_interact_interact_proto_rawDescData
}

var file_v1_interact_interact_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_v1_interact_interact_proto_goTypes = []any{
	(*VideoUpvoteReq)(nil),                   // 0: video.v1.interact.VideoUpvoteReq
	(*VideoFavoriteReq)(nil),                 // 1: video.v1.interact.VideoFavoriteReq
	(*VideoThrowShellsReq)(nil),              // 2: video.v1.interact.VideoThrowShellsReq
	(*VideoShareReq)(nil),                    // 3: video.v1.interact.VideoShareReq
	(*VideoShareResp)(nil),                   // 4: video.v1.interact.VideoShareResp
	(*VideoSendBarrageReq)(nil),              // 5: video.v1.interact.VideoSendBarrageReq
	(*UpvoteBarrageReq)(nil),                 // 6: video.v1.interact.UpvoteBarrageReq
	(*GetUserVideoStatusReq)(nil),            // 7: video.v1.interact.GetUserVideoStatusReq
	(*GetUserVideoStatusResp)(nil),           // 8: video.v1.interact.GetUserVideoStatusResp
	(*GetUserBarrageStatusReq)(nil),          // 9: video.v1.interact.GetUserBarrageStatusReq
	(*GetUserBarrageStatusResp)(nil),         // 10: video.v1.interact.GetUserBarrageStatusResp
	(*SetUserVideoStatusReq)(nil),            // 11: video.v1.interact.SetUserVideoStatusReq
	(*SetUserBarrageStatusReq)(nil),          // 12: video.v1.interact.SetUserBarrageStatusReq
	(*SetUserVideoStatusReq_Statuses)(nil),   // 13: video.v1.interact.SetUserVideoStatusReq.Statuses
	(*SetUserBarrageStatusReq_Statuses)(nil), // 14: video.v1.interact.SetUserBarrageStatusReq.Statuses
	(*emptypb.Empty)(nil),                    // 15: google.protobuf.Empty
}
var file_v1_interact_interact_proto_depIdxs = []int32{
	13, // 0: video.v1.interact.SetUserVideoStatusReq.statuses:type_name -> video.v1.interact.SetUserVideoStatusReq.Statuses
	14, // 1: video.v1.interact.SetUserBarrageStatusReq.statuses:type_name -> video.v1.interact.SetUserBarrageStatusReq.Statuses
	0,  // 2: video.v1.interact.VideoInteract.VideoUpvote:input_type -> video.v1.interact.VideoUpvoteReq
	0,  // 3: video.v1.interact.VideoInteract.VideoUpvoteRevert:input_type -> video.v1.interact.VideoUpvoteReq
	1,  // 4: video.v1.interact.VideoInteract.VideoFavorite:input_type -> video.v1.interact.VideoFavoriteReq
	1,  // 5: video.v1.interact.VideoInteract.VideoFavoriteRevert:input_type -> video.v1.interact.VideoFavoriteReq
	2,  // 6: video.v1.interact.VideoInteract.VideoThrowShells:input_type -> video.v1.interact.VideoThrowShellsReq
	2,  // 7: video.v1.interact.VideoInteract.VideoThrowShellsRevert:input_type -> video.v1.interact.VideoThrowShellsReq
	3,  // 8: video.v1.interact.VideoInteract.VideoShare:input_type -> video.v1.interact.VideoShareReq
	5,  // 9: video.v1.interact.VideoInteract.VideoSendBarrage:input_type -> video.v1.interact.VideoSendBarrageReq
	6,  // 10: video.v1.interact.VideoInteract.BarrageUpvote:input_type -> video.v1.interact.UpvoteBarrageReq
	6,  // 11: video.v1.interact.VideoInteract.BarrageUpvoteRevert:input_type -> video.v1.interact.UpvoteBarrageReq
	7,  // 12: video.v1.interact.VideoInteract.GetUserVideoStatus:input_type -> video.v1.interact.GetUserVideoStatusReq
	9,  // 13: video.v1.interact.VideoInteract.GetUserBarrageStatus:input_type -> video.v1.interact.GetUserBarrageStatusReq
	11, // 14: video.v1.interact.VideoInteract.SetUserVideoStatus:input_type -> video.v1.interact.SetUserVideoStatusReq
	11, // 15: video.v1.interact.VideoInteract.SetUserVideoStatusRevert:input_type -> video.v1.interact.SetUserVideoStatusReq
	12, // 16: video.v1.interact.VideoInteract.SetUserBarrageStatus:input_type -> video.v1.interact.SetUserBarrageStatusReq
	12, // 17: video.v1.interact.VideoInteract.SetUserBarrageStatusRevert:input_type -> video.v1.interact.SetUserBarrageStatusReq
	15, // 18: video.v1.interact.VideoInteract.VideoUpvote:output_type -> google.protobuf.Empty
	15, // 19: video.v1.interact.VideoInteract.VideoUpvoteRevert:output_type -> google.protobuf.Empty
	15, // 20: video.v1.interact.VideoInteract.VideoFavorite:output_type -> google.protobuf.Empty
	15, // 21: video.v1.interact.VideoInteract.VideoFavoriteRevert:output_type -> google.protobuf.Empty
	15, // 22: video.v1.interact.VideoInteract.VideoThrowShells:output_type -> google.protobuf.Empty
	15, // 23: video.v1.interact.VideoInteract.VideoThrowShellsRevert:output_type -> google.protobuf.Empty
	4,  // 24: video.v1.interact.VideoInteract.VideoShare:output_type -> video.v1.interact.VideoShareResp
	15, // 25: video.v1.interact.VideoInteract.VideoSendBarrage:output_type -> google.protobuf.Empty
	15, // 26: video.v1.interact.VideoInteract.BarrageUpvote:output_type -> google.protobuf.Empty
	15, // 27: video.v1.interact.VideoInteract.BarrageUpvoteRevert:output_type -> google.protobuf.Empty
	8,  // 28: video.v1.interact.VideoInteract.GetUserVideoStatus:output_type -> video.v1.interact.GetUserVideoStatusResp
	10, // 29: video.v1.interact.VideoInteract.GetUserBarrageStatus:output_type -> video.v1.interact.GetUserBarrageStatusResp
	15, // 30: video.v1.interact.VideoInteract.SetUserVideoStatus:output_type -> google.protobuf.Empty
	15, // 31: video.v1.interact.VideoInteract.SetUserVideoStatusRevert:output_type -> google.protobuf.Empty
	15, // 32: video.v1.interact.VideoInteract.SetUserBarrageStatus:output_type -> google.protobuf.Empty
	15, // 33: video.v1.interact.VideoInteract.SetUserBarrageStatusRevert:output_type -> google.protobuf.Empty
	18, // [18:34] is the sub-list for method output_type
	2,  // [2:18] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_v1_interact_interact_proto_init() }
func file_v1_interact_interact_proto_init() {
	if File_v1_interact_interact_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_interact_interact_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*VideoUpvoteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_interact_interact_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*VideoFavoriteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_interact_interact_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*VideoThrowShellsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_interact_interact_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*VideoShareReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_interact_interact_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*VideoShareResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_interact_interact_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*VideoSendBarrageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_interact_interact_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*UpvoteBarrageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_interact_interact_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetUserVideoStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_interact_interact_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GetUserVideoStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_interact_interact_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GetUserBarrageStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_interact_interact_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GetUserBarrageStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_interact_interact_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*SetUserVideoStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_interact_interact_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*SetUserBarrageStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_interact_interact_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*SetUserVideoStatusReq_Statuses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_interact_interact_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*SetUserBarrageStatusReq_Statuses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_interact_interact_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_interact_interact_proto_goTypes,
		DependencyIndexes: file_v1_interact_interact_proto_depIdxs,
		MessageInfos:      file_v1_interact_interact_proto_msgTypes,
	}.Build()
	File_v1_interact_interact_proto = out.File
	file_v1_interact_interact_proto_rawDesc = nil
	file_v1_interact_interact_proto_goTypes = nil
	file_v1_interact_interact_proto_depIdxs = nil
}
