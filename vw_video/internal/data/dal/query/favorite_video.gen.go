// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"vw_video/internal/data/dal/model"
)

func newFavoriteVideo(db *gorm.DB, opts ...gen.DOOption) favoriteVideo {
	_favoriteVideo := favoriteVideo{}

	_favoriteVideo.favoriteVideoDo.UseDB(db, opts...)
	_favoriteVideo.favoriteVideoDo.UseModel(&model.FavoriteVideo{})

	tableName := _favoriteVideo.favoriteVideoDo.TableName()
	_favoriteVideo.ALL = field.NewAsterisk(tableName)
	_favoriteVideo.ID = field.NewInt64(tableName, "id")
	_favoriteVideo.CreatedAt = field.NewTime(tableName, "created_at")
	_favoriteVideo.UpdatedAt = field.NewTime(tableName, "updated_at")
	_favoriteVideo.DeletedAt = field.NewField(tableName, "deleted_at")
	_favoriteVideo.FavoritesID = field.NewInt64(tableName, "favorites_id")
	_favoriteVideo.VideoID = field.NewInt64(tableName, "video_id")

	_favoriteVideo.fillFieldMap()

	return _favoriteVideo
}

type favoriteVideo struct {
	favoriteVideoDo

	ALL         field.Asterisk
	ID          field.Int64 // 主键
	CreatedAt   field.Time  // 创建时间
	UpdatedAt   field.Time  // 更新时间
	DeletedAt   field.Field // 删除时间
	FavoritesID field.Int64 // 收藏夹id
	VideoID     field.Int64 // 收藏的视频id

	fieldMap map[string]field.Expr
}

func (f favoriteVideo) Table(newTableName string) *favoriteVideo {
	f.favoriteVideoDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f favoriteVideo) As(alias string) *favoriteVideo {
	f.favoriteVideoDo.DO = *(f.favoriteVideoDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *favoriteVideo) updateTableName(table string) *favoriteVideo {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")
	f.DeletedAt = field.NewField(table, "deleted_at")
	f.FavoritesID = field.NewInt64(table, "favorites_id")
	f.VideoID = field.NewInt64(table, "video_id")

	f.fillFieldMap()

	return f
}

func (f *favoriteVideo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *favoriteVideo) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 6)
	f.fieldMap["id"] = f.ID
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["deleted_at"] = f.DeletedAt
	f.fieldMap["favorites_id"] = f.FavoritesID
	f.fieldMap["video_id"] = f.VideoID
}

func (f favoriteVideo) clone(db *gorm.DB) favoriteVideo {
	f.favoriteVideoDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f favoriteVideo) replaceDB(db *gorm.DB) favoriteVideo {
	f.favoriteVideoDo.ReplaceDB(db)
	return f
}

type favoriteVideoDo struct{ gen.DO }

type IFavoriteVideoDo interface {
	gen.SubQuery
	Debug() IFavoriteVideoDo
	WithContext(ctx context.Context) IFavoriteVideoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFavoriteVideoDo
	WriteDB() IFavoriteVideoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFavoriteVideoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFavoriteVideoDo
	Not(conds ...gen.Condition) IFavoriteVideoDo
	Or(conds ...gen.Condition) IFavoriteVideoDo
	Select(conds ...field.Expr) IFavoriteVideoDo
	Where(conds ...gen.Condition) IFavoriteVideoDo
	Order(conds ...field.Expr) IFavoriteVideoDo
	Distinct(cols ...field.Expr) IFavoriteVideoDo
	Omit(cols ...field.Expr) IFavoriteVideoDo
	Join(table schema.Tabler, on ...field.Expr) IFavoriteVideoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFavoriteVideoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFavoriteVideoDo
	Group(cols ...field.Expr) IFavoriteVideoDo
	Having(conds ...gen.Condition) IFavoriteVideoDo
	Limit(limit int) IFavoriteVideoDo
	Offset(offset int) IFavoriteVideoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFavoriteVideoDo
	Unscoped() IFavoriteVideoDo
	Create(values ...*model.FavoriteVideo) error
	CreateInBatches(values []*model.FavoriteVideo, batchSize int) error
	Save(values ...*model.FavoriteVideo) error
	First() (*model.FavoriteVideo, error)
	Take() (*model.FavoriteVideo, error)
	Last() (*model.FavoriteVideo, error)
	Find() ([]*model.FavoriteVideo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FavoriteVideo, err error)
	FindInBatches(result *[]*model.FavoriteVideo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FavoriteVideo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFavoriteVideoDo
	Assign(attrs ...field.AssignExpr) IFavoriteVideoDo
	Joins(fields ...field.RelationField) IFavoriteVideoDo
	Preload(fields ...field.RelationField) IFavoriteVideoDo
	FirstOrInit() (*model.FavoriteVideo, error)
	FirstOrCreate() (*model.FavoriteVideo, error)
	FindByPage(offset int, limit int) (result []*model.FavoriteVideo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFavoriteVideoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f favoriteVideoDo) Debug() IFavoriteVideoDo {
	return f.withDO(f.DO.Debug())
}

func (f favoriteVideoDo) WithContext(ctx context.Context) IFavoriteVideoDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f favoriteVideoDo) ReadDB() IFavoriteVideoDo {
	return f.Clauses(dbresolver.Read)
}

func (f favoriteVideoDo) WriteDB() IFavoriteVideoDo {
	return f.Clauses(dbresolver.Write)
}

func (f favoriteVideoDo) Session(config *gorm.Session) IFavoriteVideoDo {
	return f.withDO(f.DO.Session(config))
}

func (f favoriteVideoDo) Clauses(conds ...clause.Expression) IFavoriteVideoDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f favoriteVideoDo) Returning(value interface{}, columns ...string) IFavoriteVideoDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f favoriteVideoDo) Not(conds ...gen.Condition) IFavoriteVideoDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f favoriteVideoDo) Or(conds ...gen.Condition) IFavoriteVideoDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f favoriteVideoDo) Select(conds ...field.Expr) IFavoriteVideoDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f favoriteVideoDo) Where(conds ...gen.Condition) IFavoriteVideoDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f favoriteVideoDo) Order(conds ...field.Expr) IFavoriteVideoDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f favoriteVideoDo) Distinct(cols ...field.Expr) IFavoriteVideoDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f favoriteVideoDo) Omit(cols ...field.Expr) IFavoriteVideoDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f favoriteVideoDo) Join(table schema.Tabler, on ...field.Expr) IFavoriteVideoDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f favoriteVideoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFavoriteVideoDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f favoriteVideoDo) RightJoin(table schema.Tabler, on ...field.Expr) IFavoriteVideoDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f favoriteVideoDo) Group(cols ...field.Expr) IFavoriteVideoDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f favoriteVideoDo) Having(conds ...gen.Condition) IFavoriteVideoDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f favoriteVideoDo) Limit(limit int) IFavoriteVideoDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f favoriteVideoDo) Offset(offset int) IFavoriteVideoDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f favoriteVideoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFavoriteVideoDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f favoriteVideoDo) Unscoped() IFavoriteVideoDo {
	return f.withDO(f.DO.Unscoped())
}

func (f favoriteVideoDo) Create(values ...*model.FavoriteVideo) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f favoriteVideoDo) CreateInBatches(values []*model.FavoriteVideo, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f favoriteVideoDo) Save(values ...*model.FavoriteVideo) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f favoriteVideoDo) First() (*model.FavoriteVideo, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FavoriteVideo), nil
	}
}

func (f favoriteVideoDo) Take() (*model.FavoriteVideo, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FavoriteVideo), nil
	}
}

func (f favoriteVideoDo) Last() (*model.FavoriteVideo, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FavoriteVideo), nil
	}
}

func (f favoriteVideoDo) Find() ([]*model.FavoriteVideo, error) {
	result, err := f.DO.Find()
	return result.([]*model.FavoriteVideo), err
}

func (f favoriteVideoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FavoriteVideo, err error) {
	buf := make([]*model.FavoriteVideo, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f favoriteVideoDo) FindInBatches(result *[]*model.FavoriteVideo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f favoriteVideoDo) Attrs(attrs ...field.AssignExpr) IFavoriteVideoDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f favoriteVideoDo) Assign(attrs ...field.AssignExpr) IFavoriteVideoDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f favoriteVideoDo) Joins(fields ...field.RelationField) IFavoriteVideoDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f favoriteVideoDo) Preload(fields ...field.RelationField) IFavoriteVideoDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f favoriteVideoDo) FirstOrInit() (*model.FavoriteVideo, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FavoriteVideo), nil
	}
}

func (f favoriteVideoDo) FirstOrCreate() (*model.FavoriteVideo, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FavoriteVideo), nil
	}
}

func (f favoriteVideoDo) FindByPage(offset int, limit int) (result []*model.FavoriteVideo, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f favoriteVideoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f favoriteVideoDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f favoriteVideoDo) Delete(models ...*model.FavoriteVideo) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *favoriteVideoDo) withDO(do gen.Dao) *favoriteVideoDo {
	f.DO = *do.(*gen.DO)
	return f
}
