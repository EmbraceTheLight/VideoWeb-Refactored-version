// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"vw_video/internal/data/dal/model"
)

func newVideoClass(db *gorm.DB, opts ...gen.DOOption) videoClass {
	_videoClass := videoClass{}

	_videoClass.videoClassDo.UseDB(db, opts...)
	_videoClass.videoClassDo.UseModel(&model.VideoClass{})

	tableName := _videoClass.videoClassDo.TableName()
	_videoClass.ALL = field.NewAsterisk(tableName)
	_videoClass.VideoID = field.NewInt64(tableName, "video_id")
	_videoClass.Class = field.NewString(tableName, "class")

	_videoClass.fillFieldMap()

	return _videoClass
}

// videoClass 视频分类表，存储每个视频的类别信息
type videoClass struct {
	videoClassDo

	ALL     field.Asterisk
	VideoID field.Int64  // 视频id，
	Class   field.String // 视频分类

	fieldMap map[string]field.Expr
}

func (v videoClass) Table(newTableName string) *videoClass {
	v.videoClassDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v videoClass) As(alias string) *videoClass {
	v.videoClassDo.DO = *(v.videoClassDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *videoClass) updateTableName(table string) *videoClass {
	v.ALL = field.NewAsterisk(table)
	v.VideoID = field.NewInt64(table, "video_id")
	v.Class = field.NewString(table, "class")

	v.fillFieldMap()

	return v
}

func (v *videoClass) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *videoClass) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 2)
	v.fieldMap["video_id"] = v.VideoID
	v.fieldMap["class"] = v.Class
}

func (v videoClass) clone(db *gorm.DB) videoClass {
	v.videoClassDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v videoClass) replaceDB(db *gorm.DB) videoClass {
	v.videoClassDo.ReplaceDB(db)
	return v
}

type videoClassDo struct{ gen.DO }

type IVideoClassDo interface {
	gen.SubQuery
	Debug() IVideoClassDo
	WithContext(ctx context.Context) IVideoClassDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVideoClassDo
	WriteDB() IVideoClassDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVideoClassDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVideoClassDo
	Not(conds ...gen.Condition) IVideoClassDo
	Or(conds ...gen.Condition) IVideoClassDo
	Select(conds ...field.Expr) IVideoClassDo
	Where(conds ...gen.Condition) IVideoClassDo
	Order(conds ...field.Expr) IVideoClassDo
	Distinct(cols ...field.Expr) IVideoClassDo
	Omit(cols ...field.Expr) IVideoClassDo
	Join(table schema.Tabler, on ...field.Expr) IVideoClassDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVideoClassDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVideoClassDo
	Group(cols ...field.Expr) IVideoClassDo
	Having(conds ...gen.Condition) IVideoClassDo
	Limit(limit int) IVideoClassDo
	Offset(offset int) IVideoClassDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVideoClassDo
	Unscoped() IVideoClassDo
	Create(values ...*model.VideoClass) error
	CreateInBatches(values []*model.VideoClass, batchSize int) error
	Save(values ...*model.VideoClass) error
	First() (*model.VideoClass, error)
	Take() (*model.VideoClass, error)
	Last() (*model.VideoClass, error)
	Find() ([]*model.VideoClass, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VideoClass, err error)
	FindInBatches(result *[]*model.VideoClass, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.VideoClass) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVideoClassDo
	Assign(attrs ...field.AssignExpr) IVideoClassDo
	Joins(fields ...field.RelationField) IVideoClassDo
	Preload(fields ...field.RelationField) IVideoClassDo
	FirstOrInit() (*model.VideoClass, error)
	FirstOrCreate() (*model.VideoClass, error)
	FindByPage(offset int, limit int) (result []*model.VideoClass, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVideoClassDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v videoClassDo) Debug() IVideoClassDo {
	return v.withDO(v.DO.Debug())
}

func (v videoClassDo) WithContext(ctx context.Context) IVideoClassDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v videoClassDo) ReadDB() IVideoClassDo {
	return v.Clauses(dbresolver.Read)
}

func (v videoClassDo) WriteDB() IVideoClassDo {
	return v.Clauses(dbresolver.Write)
}

func (v videoClassDo) Session(config *gorm.Session) IVideoClassDo {
	return v.withDO(v.DO.Session(config))
}

func (v videoClassDo) Clauses(conds ...clause.Expression) IVideoClassDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v videoClassDo) Returning(value interface{}, columns ...string) IVideoClassDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v videoClassDo) Not(conds ...gen.Condition) IVideoClassDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v videoClassDo) Or(conds ...gen.Condition) IVideoClassDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v videoClassDo) Select(conds ...field.Expr) IVideoClassDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v videoClassDo) Where(conds ...gen.Condition) IVideoClassDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v videoClassDo) Order(conds ...field.Expr) IVideoClassDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v videoClassDo) Distinct(cols ...field.Expr) IVideoClassDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v videoClassDo) Omit(cols ...field.Expr) IVideoClassDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v videoClassDo) Join(table schema.Tabler, on ...field.Expr) IVideoClassDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v videoClassDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVideoClassDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v videoClassDo) RightJoin(table schema.Tabler, on ...field.Expr) IVideoClassDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v videoClassDo) Group(cols ...field.Expr) IVideoClassDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v videoClassDo) Having(conds ...gen.Condition) IVideoClassDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v videoClassDo) Limit(limit int) IVideoClassDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v videoClassDo) Offset(offset int) IVideoClassDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v videoClassDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVideoClassDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v videoClassDo) Unscoped() IVideoClassDo {
	return v.withDO(v.DO.Unscoped())
}

func (v videoClassDo) Create(values ...*model.VideoClass) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v videoClassDo) CreateInBatches(values []*model.VideoClass, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v videoClassDo) Save(values ...*model.VideoClass) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v videoClassDo) First() (*model.VideoClass, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoClass), nil
	}
}

func (v videoClassDo) Take() (*model.VideoClass, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoClass), nil
	}
}

func (v videoClassDo) Last() (*model.VideoClass, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoClass), nil
	}
}

func (v videoClassDo) Find() ([]*model.VideoClass, error) {
	result, err := v.DO.Find()
	return result.([]*model.VideoClass), err
}

func (v videoClassDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VideoClass, err error) {
	buf := make([]*model.VideoClass, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v videoClassDo) FindInBatches(result *[]*model.VideoClass, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v videoClassDo) Attrs(attrs ...field.AssignExpr) IVideoClassDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v videoClassDo) Assign(attrs ...field.AssignExpr) IVideoClassDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v videoClassDo) Joins(fields ...field.RelationField) IVideoClassDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v videoClassDo) Preload(fields ...field.RelationField) IVideoClassDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v videoClassDo) FirstOrInit() (*model.VideoClass, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoClass), nil
	}
}

func (v videoClassDo) FirstOrCreate() (*model.VideoClass, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoClass), nil
	}
}

func (v videoClassDo) FindByPage(offset int, limit int) (result []*model.VideoClass, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v videoClassDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v videoClassDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v videoClassDo) Delete(models ...*model.VideoClass) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *videoClassDo) withDO(do gen.Dao) *videoClassDo {
	v.DO = *do.(*gen.DO)
	return v
}
