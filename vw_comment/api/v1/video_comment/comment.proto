syntax = "proto3";

package comment.v1.comment;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option go_package = "api/v1/video_comment/comment;comment";

service VideoComment {
    rpc PublishComment(PublishCommentReq) returns (PublishCommentResp) {}
    rpc GetCommentList(GetCommentListReq) returns (GetCommentListResp) {}
    rpc GetCommentReplies(GetCommentRepliesReq) returns (GetCommentRepliesResp) {}
    rpc UpvoteComment(UpvoteCommentReq) returns (google.protobuf.Empty) {}
    rpc CheckIfUserUpvotedComment(CheckIfUserUpvotedCommentReq) returns (CheckIfUserUpvotedCommentResp) {}
}

message CommentInfo {
    sint64 comment_id                    = 1;
    sint64 publisher_id                  = 2;
    sint64 root_id                       = 3;
    string content                       = 4;
    google.protobuf.Timestamp created_at = 5;
    uint64 upvote_count                  = 6;
    string ip_address                    = 7;
    uint32 cnt_replies                   = 8;
}

message PublishCommentReq {
    sint64 video_id     = 1;
    sint64 parent_id    = 2;
    sint64 publisher_id = 3;
    string content      = 4;
}
message PublishCommentResp {
    sint64 comment_id = 1;
}

message GetCommentListReq {
    sint64 video_id = 1;
    int32 page_num  = 2;
    int32 page_size = 3;
    string sort_by  = 4;
    string order    = 5;
}
message GetCommentListResp {
    repeated CommentInfo comments = 1;
    int32 total_count             = 2;
}

message GetCommentRepliesReq {
    sint64 comment_id = 1;
    int32 page_num    = 2;
    int32 page_size   = 3;
    string sort_by    = 4;
    string order      = 5;
}
message GetCommentRepliesResp {
    repeated CommentInfo replies = 1;
}

message UpvoteCommentReq {
    sint64 comment_id = 1;
    sint64 user_id    = 2;

    // If is_upvote is true, the user has upvoted the comment before, so we need to cancel the upvote.
    // Otherwise, the user has not upvoted the comment before, so we need to add the upvote.
    bool is_upvoted = 3;
}
message UpvoteCommentResp {
    uint64 upvote_count = 1;
}

message CheckIfUserUpvotedCommentReq {
    sint64 comment_id = 1;
    sint64 user_id    = 2;
}
message CheckIfUserUpvotedCommentResp {
    bool is_upvoted = 1;
}