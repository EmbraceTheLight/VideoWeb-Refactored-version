// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.0
// source: v1/video_comment/comment.proto

package comment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VideoComment_PublishComment_FullMethodName            = "/comment.v1.comment.VideoComment/PublishComment"
	VideoComment_GetCommentList_FullMethodName            = "/comment.v1.comment.VideoComment/GetCommentList"
	VideoComment_GetCommentReplies_FullMethodName         = "/comment.v1.comment.VideoComment/GetCommentReplies"
	VideoComment_UpvoteComment_FullMethodName             = "/comment.v1.comment.VideoComment/UpvoteComment"
	VideoComment_CheckIfUserUpvotedComment_FullMethodName = "/comment.v1.comment.VideoComment/CheckIfUserUpvotedComment"
)

// VideoCommentClient is the client API for VideoComment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoCommentClient interface {
	PublishComment(ctx context.Context, in *PublishCommentReq, opts ...grpc.CallOption) (*PublishCommentResp, error)
	GetCommentList(ctx context.Context, in *GetCommentListReq, opts ...grpc.CallOption) (*GetCommentListResp, error)
	GetCommentReplies(ctx context.Context, in *GetCommentRepliesReq, opts ...grpc.CallOption) (*GetCommentRepliesResp, error)
	UpvoteComment(ctx context.Context, in *UpvoteCommentReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckIfUserUpvotedComment(ctx context.Context, in *CheckIfUserUpvotedCommentReq, opts ...grpc.CallOption) (*CheckIfUserUpvotedCommentResp, error)
}

type videoCommentClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoCommentClient(cc grpc.ClientConnInterface) VideoCommentClient {
	return &videoCommentClient{cc}
}

func (c *videoCommentClient) PublishComment(ctx context.Context, in *PublishCommentReq, opts ...grpc.CallOption) (*PublishCommentResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishCommentResp)
	err := c.cc.Invoke(ctx, VideoComment_PublishComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoCommentClient) GetCommentList(ctx context.Context, in *GetCommentListReq, opts ...grpc.CallOption) (*GetCommentListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommentListResp)
	err := c.cc.Invoke(ctx, VideoComment_GetCommentList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoCommentClient) GetCommentReplies(ctx context.Context, in *GetCommentRepliesReq, opts ...grpc.CallOption) (*GetCommentRepliesResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommentRepliesResp)
	err := c.cc.Invoke(ctx, VideoComment_GetCommentReplies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoCommentClient) UpvoteComment(ctx context.Context, in *UpvoteCommentReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VideoComment_UpvoteComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoCommentClient) CheckIfUserUpvotedComment(ctx context.Context, in *CheckIfUserUpvotedCommentReq, opts ...grpc.CallOption) (*CheckIfUserUpvotedCommentResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckIfUserUpvotedCommentResp)
	err := c.cc.Invoke(ctx, VideoComment_CheckIfUserUpvotedComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoCommentServer is the server API for VideoComment service.
// All implementations must embed UnimplementedVideoCommentServer
// for forward compatibility.
type VideoCommentServer interface {
	PublishComment(context.Context, *PublishCommentReq) (*PublishCommentResp, error)
	GetCommentList(context.Context, *GetCommentListReq) (*GetCommentListResp, error)
	GetCommentReplies(context.Context, *GetCommentRepliesReq) (*GetCommentRepliesResp, error)
	UpvoteComment(context.Context, *UpvoteCommentReq) (*emptypb.Empty, error)
	CheckIfUserUpvotedComment(context.Context, *CheckIfUserUpvotedCommentReq) (*CheckIfUserUpvotedCommentResp, error)
	mustEmbedUnimplementedVideoCommentServer()
}

// UnimplementedVideoCommentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVideoCommentServer struct{}

func (UnimplementedVideoCommentServer) PublishComment(context.Context, *PublishCommentReq) (*PublishCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishComment not implemented")
}
func (UnimplementedVideoCommentServer) GetCommentList(context.Context, *GetCommentListReq) (*GetCommentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentList not implemented")
}
func (UnimplementedVideoCommentServer) GetCommentReplies(context.Context, *GetCommentRepliesReq) (*GetCommentRepliesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentReplies not implemented")
}
func (UnimplementedVideoCommentServer) UpvoteComment(context.Context, *UpvoteCommentReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpvoteComment not implemented")
}
func (UnimplementedVideoCommentServer) CheckIfUserUpvotedComment(context.Context, *CheckIfUserUpvotedCommentReq) (*CheckIfUserUpvotedCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfUserUpvotedComment not implemented")
}
func (UnimplementedVideoCommentServer) mustEmbedUnimplementedVideoCommentServer() {}
func (UnimplementedVideoCommentServer) testEmbeddedByValue()                      {}

// UnsafeVideoCommentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoCommentServer will
// result in compilation errors.
type UnsafeVideoCommentServer interface {
	mustEmbedUnimplementedVideoCommentServer()
}

func RegisterVideoCommentServer(s grpc.ServiceRegistrar, srv VideoCommentServer) {
	// If the following call pancis, it indicates UnimplementedVideoCommentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VideoComment_ServiceDesc, srv)
}

func _VideoComment_PublishComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoCommentServer).PublishComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoComment_PublishComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoCommentServer).PublishComment(ctx, req.(*PublishCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoComment_GetCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoCommentServer).GetCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoComment_GetCommentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoCommentServer).GetCommentList(ctx, req.(*GetCommentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoComment_GetCommentReplies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentRepliesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoCommentServer).GetCommentReplies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoComment_GetCommentReplies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoCommentServer).GetCommentReplies(ctx, req.(*GetCommentRepliesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoComment_UpvoteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpvoteCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoCommentServer).UpvoteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoComment_UpvoteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoCommentServer).UpvoteComment(ctx, req.(*UpvoteCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoComment_CheckIfUserUpvotedComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIfUserUpvotedCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoCommentServer).CheckIfUserUpvotedComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoComment_CheckIfUserUpvotedComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoCommentServer).CheckIfUserUpvotedComment(ctx, req.(*CheckIfUserUpvotedCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoComment_ServiceDesc is the grpc.ServiceDesc for VideoComment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoComment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comment.v1.comment.VideoComment",
	HandlerType: (*VideoCommentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishComment",
			Handler:    _VideoComment_PublishComment_Handler,
		},
		{
			MethodName: "GetCommentList",
			Handler:    _VideoComment_GetCommentList_Handler,
		},
		{
			MethodName: "GetCommentReplies",
			Handler:    _VideoComment_GetCommentReplies_Handler,
		},
		{
			MethodName: "UpvoteComment",
			Handler:    _VideoComment_UpvoteComment_Handler,
		},
		{
			MethodName: "CheckIfUserUpvotedComment",
			Handler:    _VideoComment_CheckIfUserUpvotedComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/video_comment/comment.proto",
}
