// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.0
// source: v1/identity/user_identity.proto

package idv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Identity_CheckUsernamePassword_FullMethodName = "/user.v1.id.Identity/CheckUsernamePassword"
	Identity_CacheAccessToken_FullMethodName      = "/user.v1.id.Identity/CacheAccessToken"
	Identity_AddExpForLogin_FullMethodName        = "/user.v1.id.Identity/AddExpForLogin"
	Identity_Register_FullMethodName              = "/user.v1.id.Identity/Register"
	Identity_Logout_FullMethodName                = "/user.v1.id.Identity/Logout"
)

// IdentityClient is the client API for Identity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentityClient interface {
	// user identity
	CheckUsernamePassword(ctx context.Context, in *CheckUsernamePasswordReq, opts ...grpc.CallOption) (*CheckUsernamePasswordResp, error)
	// user identity
	CacheAccessToken(ctx context.Context, in *CacheAccessTokenReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// user identity
	AddExpForLogin(ctx context.Context, in *AddExpForLoginReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type identityClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentityClient(cc grpc.ClientConnInterface) IdentityClient {
	return &identityClient{cc}
}

func (c *identityClient) CheckUsernamePassword(ctx context.Context, in *CheckUsernamePasswordReq, opts ...grpc.CallOption) (*CheckUsernamePasswordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckUsernamePasswordResp)
	err := c.cc.Invoke(ctx, Identity_CheckUsernamePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityClient) CacheAccessToken(ctx context.Context, in *CacheAccessTokenReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Identity_CacheAccessToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityClient) AddExpForLogin(ctx context.Context, in *AddExpForLoginReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Identity_AddExpForLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResp)
	err := c.cc.Invoke(ctx, Identity_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Identity_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityServer is the server API for Identity service.
// All implementations must embed UnimplementedIdentityServer
// for forward compatibility.
type IdentityServer interface {
	// user identity
	CheckUsernamePassword(context.Context, *CheckUsernamePasswordReq) (*CheckUsernamePasswordResp, error)
	// user identity
	CacheAccessToken(context.Context, *CacheAccessTokenReq) (*emptypb.Empty, error)
	// user identity
	AddExpForLogin(context.Context, *AddExpForLoginReq) (*emptypb.Empty, error)
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	Logout(context.Context, *LogoutReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedIdentityServer()
}

// UnimplementedIdentityServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIdentityServer struct{}

func (UnimplementedIdentityServer) CheckUsernamePassword(context.Context, *CheckUsernamePasswordReq) (*CheckUsernamePasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUsernamePassword not implemented")
}
func (UnimplementedIdentityServer) CacheAccessToken(context.Context, *CacheAccessTokenReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheAccessToken not implemented")
}
func (UnimplementedIdentityServer) AddExpForLogin(context.Context, *AddExpForLoginReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddExpForLogin not implemented")
}
func (UnimplementedIdentityServer) Register(context.Context, *RegisterReq) (*RegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedIdentityServer) Logout(context.Context, *LogoutReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedIdentityServer) mustEmbedUnimplementedIdentityServer() {}
func (UnimplementedIdentityServer) testEmbeddedByValue()                  {}

// UnsafeIdentityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentityServer will
// result in compilation errors.
type UnsafeIdentityServer interface {
	mustEmbedUnimplementedIdentityServer()
}

func RegisterIdentityServer(s grpc.ServiceRegistrar, srv IdentityServer) {
	// If the following call pancis, it indicates UnimplementedIdentityServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Identity_ServiceDesc, srv)
}

func _Identity_CheckUsernamePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUsernamePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServer).CheckUsernamePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Identity_CheckUsernamePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServer).CheckUsernamePassword(ctx, req.(*CheckUsernamePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Identity_CacheAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheAccessTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServer).CacheAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Identity_CacheAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServer).CacheAccessToken(ctx, req.(*CacheAccessTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Identity_AddExpForLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddExpForLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServer).AddExpForLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Identity_AddExpForLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServer).AddExpForLogin(ctx, req.(*AddExpForLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Identity_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Identity_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Identity_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Identity_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Identity_ServiceDesc is the grpc.ServiceDesc for Identity service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Identity_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.v1.id.Identity",
	HandlerType: (*IdentityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckUsernamePassword",
			Handler:    _Identity_CheckUsernamePassword_Handler,
		},
		{
			MethodName: "CacheAccessToken",
			Handler:    _Identity_CacheAccessToken_Handler,
		},
		{
			MethodName: "AddExpForLogin",
			Handler:    _Identity_AddExpForLogin_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Identity_Register_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Identity_Logout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/identity/user_identity.proto",
}
