// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v5.27.0
// source: user/v1/userinfo/userinfo.proto

package v1info

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserinfoForgetPassword = "/user.v1.info.Userinfo/ForgetPassword"
const OperationUserinfoGetUserDetail = "/user.v1.info.Userinfo/GetUserDetail"
const OperationUserinfoModifyEmail = "/user.v1.info.Userinfo/ModifyEmail"
const OperationUserinfoModifyPassword = "/user.v1.info.Userinfo/ModifyPassword"
const OperationUserinfoModifySignature = "/user.v1.info.Userinfo/ModifySignature"
const OperationUserinfoModifyUsername = "/user.v1.info.Userinfo/ModifyUsername"
const OperationUserinfoUploadAvatar = "/user.v1.info.Userinfo/UploadAvatar"

type UserinfoHTTPServer interface {
	ForgetPassword(context.Context, *ForgetPasswordRequest) (*ForgetPasswordResp, error)
	GetUserDetail(context.Context, *GetUserDetailRequest) (*GetUserDetailResp, error)
	ModifyEmail(context.Context, *ModifyEmailRequest) (*ModifyEmailResp, error)
	ModifyPassword(context.Context, *ModifyPasswordRequest) (*ModifyPasswordResp, error)
	ModifySignature(context.Context, *ModifySignatureRequest) (*ModifySignatureResp, error)
	ModifyUsername(context.Context, *ModifyUsernameRequest) (*ModifyUsernameResp, error)
	UploadAvatar(context.Context, *UploadAvatarRequest) (*UploadAvatarResp, error)
}

func RegisterUserinfoHTTPServer(s *http.Server, srv UserinfoHTTPServer) {
	r := s.Route("/")
	r.PUT("/api/v1/user/{user_id}/profile/username", _Userinfo_ModifyUsername0_HTTP_Handler(srv))
	r.GET("/api/v1/user/{user_id}/profile/user_detail", _Userinfo_GetUserDetail0_HTTP_Handler(srv))
	r.PUT("/api/v1/user/{user_id}/profile/email", _Userinfo_ModifyEmail0_HTTP_Handler(srv))
	r.PUT("/api/v1/user/{user_id}/profile/signature", _Userinfo_ModifySignature0_HTTP_Handler(srv))
	r.PUT("/api/v1/user/{user_id}/profile/avatar", _Userinfo_UploadAvatar0_HTTP_Handler(srv))
	r.PUT("/api/v1/user/{user_id}/profile/password/modify", _Userinfo_ModifyPassword0_HTTP_Handler(srv))
	r.PUT("/api/v1/user/{user_id}/profile/password/forget", _Userinfo_ForgetPassword0_HTTP_Handler(srv))
}

func _Userinfo_ModifyUsername0_HTTP_Handler(srv UserinfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ModifyUsernameRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserinfoModifyUsername)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ModifyUsername(ctx, req.(*ModifyUsernameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ModifyUsernameResp)
		return ctx.Result(200, reply)
	}
}

func _Userinfo_GetUserDetail0_HTTP_Handler(srv UserinfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserinfoGetUserDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserDetail(ctx, req.(*GetUserDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserDetailResp)
		return ctx.Result(200, reply)
	}
}

func _Userinfo_ModifyEmail0_HTTP_Handler(srv UserinfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ModifyEmailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserinfoModifyEmail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ModifyEmail(ctx, req.(*ModifyEmailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ModifyEmailResp)
		return ctx.Result(200, reply)
	}
}

func _Userinfo_ModifySignature0_HTTP_Handler(srv UserinfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ModifySignatureRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserinfoModifySignature)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ModifySignature(ctx, req.(*ModifySignatureRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ModifySignatureResp)
		return ctx.Result(200, reply)
	}
}

func _Userinfo_UploadAvatar0_HTTP_Handler(srv UserinfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UploadAvatarRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserinfoUploadAvatar)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UploadAvatar(ctx, req.(*UploadAvatarRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UploadAvatarResp)
		return ctx.Result(200, reply)
	}
}

func _Userinfo_ModifyPassword0_HTTP_Handler(srv UserinfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ModifyPasswordRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserinfoModifyPassword)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ModifyPassword(ctx, req.(*ModifyPasswordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ModifyPasswordResp)
		return ctx.Result(200, reply)
	}
}

func _Userinfo_ForgetPassword0_HTTP_Handler(srv UserinfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ForgetPasswordRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserinfoForgetPassword)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ForgetPassword(ctx, req.(*ForgetPasswordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ForgetPasswordResp)
		return ctx.Result(200, reply)
	}
}

type UserinfoHTTPClient interface {
	ForgetPassword(ctx context.Context, req *ForgetPasswordRequest, opts ...http.CallOption) (rsp *ForgetPasswordResp, err error)
	GetUserDetail(ctx context.Context, req *GetUserDetailRequest, opts ...http.CallOption) (rsp *GetUserDetailResp, err error)
	ModifyEmail(ctx context.Context, req *ModifyEmailRequest, opts ...http.CallOption) (rsp *ModifyEmailResp, err error)
	ModifyPassword(ctx context.Context, req *ModifyPasswordRequest, opts ...http.CallOption) (rsp *ModifyPasswordResp, err error)
	ModifySignature(ctx context.Context, req *ModifySignatureRequest, opts ...http.CallOption) (rsp *ModifySignatureResp, err error)
	ModifyUsername(ctx context.Context, req *ModifyUsernameRequest, opts ...http.CallOption) (rsp *ModifyUsernameResp, err error)
	UploadAvatar(ctx context.Context, req *UploadAvatarRequest, opts ...http.CallOption) (rsp *UploadAvatarResp, err error)
}

type UserinfoHTTPClientImpl struct {
	cc *http.Client
}

func NewUserinfoHTTPClient(client *http.Client) UserinfoHTTPClient {
	return &UserinfoHTTPClientImpl{client}
}

func (c *UserinfoHTTPClientImpl) ForgetPassword(ctx context.Context, in *ForgetPasswordRequest, opts ...http.CallOption) (*ForgetPasswordResp, error) {
	var out ForgetPasswordResp
	pattern := "/api/v1/user/{user_id}/profile/password/forget"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserinfoForgetPassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserinfoHTTPClientImpl) GetUserDetail(ctx context.Context, in *GetUserDetailRequest, opts ...http.CallOption) (*GetUserDetailResp, error) {
	var out GetUserDetailResp
	pattern := "/api/v1/user/{user_id}/profile/user_detail"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserinfoGetUserDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserinfoHTTPClientImpl) ModifyEmail(ctx context.Context, in *ModifyEmailRequest, opts ...http.CallOption) (*ModifyEmailResp, error) {
	var out ModifyEmailResp
	pattern := "/api/v1/user/{user_id}/profile/email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserinfoModifyEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserinfoHTTPClientImpl) ModifyPassword(ctx context.Context, in *ModifyPasswordRequest, opts ...http.CallOption) (*ModifyPasswordResp, error) {
	var out ModifyPasswordResp
	pattern := "/api/v1/user/{user_id}/profile/password/modify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserinfoModifyPassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserinfoHTTPClientImpl) ModifySignature(ctx context.Context, in *ModifySignatureRequest, opts ...http.CallOption) (*ModifySignatureResp, error) {
	var out ModifySignatureResp
	pattern := "/api/v1/user/{user_id}/profile/signature"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserinfoModifySignature))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserinfoHTTPClientImpl) ModifyUsername(ctx context.Context, in *ModifyUsernameRequest, opts ...http.CallOption) (*ModifyUsernameResp, error) {
	var out ModifyUsernameResp
	pattern := "/api/v1/user/{user_id}/profile/username"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserinfoModifyUsername))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserinfoHTTPClientImpl) UploadAvatar(ctx context.Context, in *UploadAvatarRequest, opts ...http.CallOption) (*UploadAvatarResp, error) {
	var out UploadAvatarResp
	pattern := "/api/v1/user/{user_id}/profile/avatar"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserinfoUploadAvatar))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
