// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"vw_gateway/internal/biz"
	"vw_gateway/internal/conf"
	"vw_gateway/internal/data"
	"vw_gateway/internal/pkg/captcha"
	"vw_gateway/internal/pkg/middlewares/auth"
	"vw_gateway/internal/server"
	"vw_gateway/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, registry *conf.Registry, jwt *conf.JWT, email *conf.Email, trace *conf.Trace, confService *conf.Service, logger log.Logger) (*kratos.App, func(), error) {
	grpcServer := server.NewGRPCServer(confServer, logger)
	discovery := data.NewDiscovery(registry)
	identityClient := data.NewUserIdentityClient(discovery, confService)
	userinfoClient := data.NewUserinfoClient(discovery, confService)
	captchaClient := data.NewCaptchaClient(discovery, confService)
	fileServiceClient := data.NewFileClient(discovery, confService)
	favoriteClient := data.NewFavoritesClient(discovery, confService)
	followClient := data.NewFollowClient(discovery, confService)
	clusterClient := data.NewRedisClusterClient(confData)
	dataData, cleanup, err := data.NewData(logger, identityClient, userinfoClient, captchaClient, fileServiceClient, favoriteClient, followClient, clusterClient)
	if err != nil {
		return nil, nil, err
	}
	captchaRepo := data.NewCaptchaRepo(logger, dataData)
	captchaEmail := captcha.NewEmail(email, logger)
	captchaUsecase := biz.NewCaptchaUsecase(logger, captchaRepo, captchaEmail)
	captchaService := service.NewCaptchaService(logger, captchaUsecase)
	userFileRepo := data.NewUserFileRepo(dataData, logger)
	userFileUsecase := biz.NewUserFileUsecase(userFileRepo, logger)
	userFileService := service.NewUserFileService(userFileUsecase, logger)
	userIdentityRepo := data.NewUserIdentityRepo(dataData, logger)
	jwtAuth := auth.NewJWTAuth(jwt)
	userIdentityUsecase := biz.NewUserIdentityUsecase(userIdentityRepo, jwtAuth, logger)
	userIdentityService := service.NewUserIdentityService(userIdentityUsecase, logger)
	followRepo := data.NewFollowRepo(dataData, logger)
	followUsecase := biz.NewFollowUsecase(followRepo, logger)
	followService := service.NewFollowService(logger, followUsecase)
	userinfoRepo := data.NewUserInfoRepo(dataData, logger)
	userinfoUsecase := biz.NewUserinfoUsecase(userinfoRepo, logger)
	userinfoService := service.NewUserinfoService(userinfoUsecase, logger)
	favoritesRepo := data.NewFavoritesRepo(dataData, favoriteClient, logger)
	favoritesUsecase := biz.NewFavoritesUsecase(favoritesRepo, logger)
	favoritesService := service.NewFavoritesService(favoritesUsecase, logger)
	httpServer := server.NewHTTPServer(confServer, jwt, captchaService, userFileService, userIdentityService, followService, clusterClient, userinfoService, favoritesService, logger)
	registrar := data.NewRegistrar(registry)
	app := newApp(logger, grpcServer, httpServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
