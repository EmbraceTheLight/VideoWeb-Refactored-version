// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"vw_gateway/internal/biz/userbiz"
	"vw_gateway/internal/biz/videobiz"
	"vw_gateway/internal/conf"
	"vw_gateway/internal/data"
	"vw_gateway/internal/data/userdata"
	"vw_gateway/internal/data/videodata"
	"vw_gateway/internal/pkg/captcha"
	"vw_gateway/internal/pkg/middlewares/auth"
	"vw_gateway/internal/server"
	"vw_gateway/internal/service/ginservice"
	"vw_gateway/internal/service/ginservice/service"
	"vw_gateway/internal/service/user_service"
	"vw_gateway/internal/service/video_service"
)

import (
	_ "github.com/dtm-labs/driver-kratos"
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, registry *conf.Registry, jwt *conf.JWT, email *conf.Email, trace *conf.Trace, service *conf.Service, dtm *conf.DTM, logger log.Logger) (*kratos.App, func(), error) {
	grpcServer := server.NewGRPCServer(confServer, logger)
	discovery := data.NewDiscovery(registry)
	identityClient := userdata.NewUserIdentityClient(discovery, service)
	userinfoClient := userdata.NewUserinfoClient(discovery, service)
	captchaClient := userdata.NewCaptchaClient(discovery, service)
	fileServiceClient := userdata.NewFileClient(discovery, service)
	favoriteClient := userdata.NewFavoritesClient(discovery, service)
	followClient := userdata.NewFollowClient(discovery, service)
	clusterClient := data.NewRedisClusterClient(confData)
	userdataData, cleanup, err := userdata.NewData(logger, identityClient, userinfoClient, captchaClient, fileServiceClient, favoriteClient, followClient, clusterClient, dtm)
	if err != nil {
		return nil, nil, err
	}
	captchaRepo := userdata.NewCaptchaRepo(logger, userdataData)
	captchaEmail := captcha.NewEmail(email, logger)
	captchaUsecase := userbiz.NewCaptchaUsecase(logger, captchaRepo, captchaEmail)
	captchaService := user.NewCaptchaService(logger, captchaUsecase)
	userFileRepo := userdata.NewUserFileRepo(userdataData, logger)
	userFileUsecase := userbiz.NewUserFileUsecase(userFileRepo, logger)
	fileService := user.NewUserFileService(userFileUsecase, logger)
	userIdentityRepo := userdata.NewUserIdentityRepo(userdataData, logger)
	jwtAuth := auth.NewJWTAuth(jwt)
	userIdentityUsecase := userbiz.NewUserIdentityUsecase(userIdentityRepo, jwtAuth, logger)
	identityService := user.NewUserIdentityService(userIdentityUsecase, logger)
	followRepo := userdata.NewFollowRepo(userdataData, logger)
	followUsecase := userbiz.NewFollowUsecase(followRepo, logger)
	followService := user.NewFollowService(logger, followUsecase)
	userinfoRepo := userdata.NewUserInfoRepo(userdataData, logger)
	userinfoUsecase := userbiz.NewUserinfoUsecase(userinfoRepo, logger)
	infoService := user.NewUserinfoService(userinfoUsecase, logger)
	favoritesRepo := userdata.NewFavoritesRepo(userdataData, favoriteClient, logger)
	favoritesUsecase := userbiz.NewFavoritesUsecase(favoritesRepo, logger)
	favoritesService := user.NewFavoritesService(favoritesUsecase, logger)
	videoInfoClient := videodata.NewVideoInfoClient(discovery, service)
	videoInteractClient := videodata.NewVideoInteractClient(discovery, service)
	videodataData, cleanup2, err := videodata.NewData(logger, videoInfoClient, userinfoClient, videoInteractClient, clusterClient, dtm)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	videoInfoRepo := videodata.NewVideoInfoRepo(videodataData, logger)
	videoInfoUsecase := videobiz.NewVideoInfoUsecase(videoInfoRepo, logger)
	videoInfoService := video.NewVideoInfoService(videoInfoUsecase, logger)
	interactRepo := videodata.NewInteractRepo(videodataData, logger)
	interactUsecase := videobiz.NewInteractUsecase(interactRepo, logger)
	interactService := video.NewInteractService(interactUsecase, logger)
	videoDownloadFileService := gs.NewVideoDownloadFileService(videoInfoUsecase, logger)
	engine := ginservice.NewGinEngine(jwt, clusterClient)
	httpServer := server.NewHTTPServer(confServer, jwt, captchaService, fileService, identityService, followService, clusterClient, infoService, favoritesService, videoInfoService, interactService, videoDownloadFileService, engine, logger)
	registrar := data.NewRegistrar(registry)
	app := newApp(logger, grpcServer, httpServer, registrar)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
