// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v5.27.0
// source: v1/user/follow/follow.proto

package followv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationFollowFollowUser = "/gateway.api.v1.user.follow.Follow/FollowUser"
const OperationFollowGetFolloweeInfo = "/gateway.api.v1.user.follow.Follow/GetFolloweeInfo"
const OperationFollowUnfollowUser = "/gateway.api.v1.user.follow.Follow/UnfollowUser"

type FollowHTTPServer interface {
	FollowUser(context.Context, *FollowUserReq) (*FollowUserResp, error)
	GetFolloweeInfo(context.Context, *GetFolloweeInfoReq) (*GetFolloweeInfoResp, error)
	UnfollowUser(context.Context, *UnfollowUserReq) (*UnfollowUserResp, error)
}

func RegisterFollowHTTPServer(s *http.Server, srv FollowHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/{user_id}/follow", _Follow_FollowUser0_HTTP_Handler(srv))
	r.PUT("/api/v1/{user_id}/follow", _Follow_UnfollowUser0_HTTP_Handler(srv))
	r.GET("/api/v1/{user_id}/followList", _Follow_GetFolloweeInfo0_HTTP_Handler(srv))
}

func _Follow_FollowUser0_HTTP_Handler(srv FollowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FollowUserReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFollowFollowUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FollowUser(ctx, req.(*FollowUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FollowUserResp)
		return ctx.Result(200, reply)
	}
}

func _Follow_UnfollowUser0_HTTP_Handler(srv FollowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UnfollowUserReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFollowUnfollowUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UnfollowUser(ctx, req.(*UnfollowUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UnfollowUserResp)
		return ctx.Result(200, reply)
	}
}

func _Follow_GetFolloweeInfo0_HTTP_Handler(srv FollowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetFolloweeInfoReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFollowGetFolloweeInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetFolloweeInfo(ctx, req.(*GetFolloweeInfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetFolloweeInfoResp)
		return ctx.Result(200, reply)
	}
}

type FollowHTTPClient interface {
	FollowUser(ctx context.Context, req *FollowUserReq, opts ...http.CallOption) (rsp *FollowUserResp, err error)
	GetFolloweeInfo(ctx context.Context, req *GetFolloweeInfoReq, opts ...http.CallOption) (rsp *GetFolloweeInfoResp, err error)
	UnfollowUser(ctx context.Context, req *UnfollowUserReq, opts ...http.CallOption) (rsp *UnfollowUserResp, err error)
}

type FollowHTTPClientImpl struct {
	cc *http.Client
}

func NewFollowHTTPClient(client *http.Client) FollowHTTPClient {
	return &FollowHTTPClientImpl{client}
}

func (c *FollowHTTPClientImpl) FollowUser(ctx context.Context, in *FollowUserReq, opts ...http.CallOption) (*FollowUserResp, error) {
	var out FollowUserResp
	pattern := "/api/v1/{user_id}/follow"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFollowFollowUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *FollowHTTPClientImpl) GetFolloweeInfo(ctx context.Context, in *GetFolloweeInfoReq, opts ...http.CallOption) (*GetFolloweeInfoResp, error) {
	var out GetFolloweeInfoResp
	pattern := "/api/v1/{user_id}/followList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFollowGetFolloweeInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *FollowHTTPClientImpl) UnfollowUser(ctx context.Context, in *UnfollowUserReq, opts ...http.CallOption) (*UnfollowUserResp, error) {
	var out UnfollowUserResp
	pattern := "/api/v1/{user_id}/follow"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFollowUnfollowUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
