// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v5.27.0
// source: v1/user/userinfo/userinfo.proto

package infov1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserinfoForgetPassword = "/gateway.api.v1.user.userinfo.Userinfo/ForgetPassword"
const OperationUserinfoModifyEmail = "/gateway.api.v1.user.userinfo.Userinfo/ModifyEmail"
const OperationUserinfoModifyPassword = "/gateway.api.v1.user.userinfo.Userinfo/ModifyPassword"
const OperationUserinfoModifyUserSignature = "/gateway.api.v1.user.userinfo.Userinfo/ModifyUserSignature"
const OperationUserinfoModifyUsername = "/gateway.api.v1.user.userinfo.Userinfo/ModifyUsername"
const OperationUserinfoUserinfo = "/gateway.api.v1.user.userinfo.Userinfo/Userinfo"

type UserinfoHTTPServer interface {
	ForgetPassword(context.Context, *ForgetPasswordReq) (*ForgetPasswordResp, error)
	ModifyEmail(context.Context, *ModifyEmailReq) (*ModifyEmailResp, error)
	ModifyPassword(context.Context, *ModifyPasswordReq) (*ModifyPasswordResp, error)
	ModifyUserSignature(context.Context, *ModifySignatureReq) (*ModifySignatureResp, error)
	ModifyUsername(context.Context, *ModifyUsernameReq) (*ModifyUsernameResp, error)
	Userinfo(context.Context, *UserinfoReq) (*UserinfoResp, error)
}

func RegisterUserinfoHTTPServer(s *http.Server, srv UserinfoHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/userinfo/{user_id}", _Userinfo_Userinfo0_HTTP_Handler(srv))
	r.POST("/api/v1/userinfo/{user_id}/modifyEmail", _Userinfo_ModifyEmail0_HTTP_Handler(srv))
	r.POST("/api/v1/userinfo/{user_id}/modifyPassword", _Userinfo_ModifyPassword0_HTTP_Handler(srv))
	r.POST("/api/v1/userinfo/{user_id}/modifySignature", _Userinfo_ModifyUserSignature0_HTTP_Handler(srv))
	r.POST("/api/v1/userinfo/{user_id}/forgetPassword", _Userinfo_ForgetPassword0_HTTP_Handler(srv))
	r.POST("/api/v1/userinfo/{user_id}/modifyUsername", _Userinfo_ModifyUsername0_HTTP_Handler(srv))
}

func _Userinfo_Userinfo0_HTTP_Handler(srv UserinfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserinfoReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserinfoUserinfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Userinfo(ctx, req.(*UserinfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserinfoResp)
		return ctx.Result(200, reply)
	}
}

func _Userinfo_ModifyEmail0_HTTP_Handler(srv UserinfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ModifyEmailReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserinfoModifyEmail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ModifyEmail(ctx, req.(*ModifyEmailReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ModifyEmailResp)
		return ctx.Result(200, reply)
	}
}

func _Userinfo_ModifyPassword0_HTTP_Handler(srv UserinfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ModifyPasswordReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserinfoModifyPassword)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ModifyPassword(ctx, req.(*ModifyPasswordReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ModifyPasswordResp)
		return ctx.Result(200, reply)
	}
}

func _Userinfo_ModifyUserSignature0_HTTP_Handler(srv UserinfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ModifySignatureReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserinfoModifyUserSignature)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ModifyUserSignature(ctx, req.(*ModifySignatureReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ModifySignatureResp)
		return ctx.Result(200, reply)
	}
}

func _Userinfo_ForgetPassword0_HTTP_Handler(srv UserinfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ForgetPasswordReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserinfoForgetPassword)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ForgetPassword(ctx, req.(*ForgetPasswordReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ForgetPasswordResp)
		return ctx.Result(200, reply)
	}
}

func _Userinfo_ModifyUsername0_HTTP_Handler(srv UserinfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ModifyUsernameReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserinfoModifyUsername)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ModifyUsername(ctx, req.(*ModifyUsernameReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ModifyUsernameResp)
		return ctx.Result(200, reply)
	}
}

type UserinfoHTTPClient interface {
	ForgetPassword(ctx context.Context, req *ForgetPasswordReq, opts ...http.CallOption) (rsp *ForgetPasswordResp, err error)
	ModifyEmail(ctx context.Context, req *ModifyEmailReq, opts ...http.CallOption) (rsp *ModifyEmailResp, err error)
	ModifyPassword(ctx context.Context, req *ModifyPasswordReq, opts ...http.CallOption) (rsp *ModifyPasswordResp, err error)
	ModifyUserSignature(ctx context.Context, req *ModifySignatureReq, opts ...http.CallOption) (rsp *ModifySignatureResp, err error)
	ModifyUsername(ctx context.Context, req *ModifyUsernameReq, opts ...http.CallOption) (rsp *ModifyUsernameResp, err error)
	Userinfo(ctx context.Context, req *UserinfoReq, opts ...http.CallOption) (rsp *UserinfoResp, err error)
}

type UserinfoHTTPClientImpl struct {
	cc *http.Client
}

func NewUserinfoHTTPClient(client *http.Client) UserinfoHTTPClient {
	return &UserinfoHTTPClientImpl{client}
}

func (c *UserinfoHTTPClientImpl) ForgetPassword(ctx context.Context, in *ForgetPasswordReq, opts ...http.CallOption) (*ForgetPasswordResp, error) {
	var out ForgetPasswordResp
	pattern := "/api/v1/userinfo/{user_id}/forgetPassword"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserinfoForgetPassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserinfoHTTPClientImpl) ModifyEmail(ctx context.Context, in *ModifyEmailReq, opts ...http.CallOption) (*ModifyEmailResp, error) {
	var out ModifyEmailResp
	pattern := "/api/v1/userinfo/{user_id}/modifyEmail"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserinfoModifyEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserinfoHTTPClientImpl) ModifyPassword(ctx context.Context, in *ModifyPasswordReq, opts ...http.CallOption) (*ModifyPasswordResp, error) {
	var out ModifyPasswordResp
	pattern := "/api/v1/userinfo/{user_id}/modifyPassword"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserinfoModifyPassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserinfoHTTPClientImpl) ModifyUserSignature(ctx context.Context, in *ModifySignatureReq, opts ...http.CallOption) (*ModifySignatureResp, error) {
	var out ModifySignatureResp
	pattern := "/api/v1/userinfo/{user_id}/modifySignature"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserinfoModifyUserSignature))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserinfoHTTPClientImpl) ModifyUsername(ctx context.Context, in *ModifyUsernameReq, opts ...http.CallOption) (*ModifyUsernameResp, error) {
	var out ModifyUsernameResp
	pattern := "/api/v1/userinfo/{user_id}/modifyUsername"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserinfoModifyUsername))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserinfoHTTPClientImpl) Userinfo(ctx context.Context, in *UserinfoReq, opts ...http.CallOption) (*UserinfoResp, error) {
	var out UserinfoResp
	pattern := "/api/v1/userinfo/{user_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserinfoUserinfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
