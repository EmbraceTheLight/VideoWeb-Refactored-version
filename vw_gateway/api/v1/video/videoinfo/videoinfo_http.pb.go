// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v5.27.0
// source: v1/video/videoinfo/videoinfo.proto

package videoinfo

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationVideoInfoGetVideoInfo = "/gateway.api.v1.video.videoinfo.VideoInfo/GetVideoInfo"
const OperationVideoInfoGetVideoList = "/gateway.api.v1.video.videoinfo.VideoInfo/GetVideoList"

type VideoInfoHTTPServer interface {
	GetVideoInfo(context.Context, *GetVideoInfoReq) (*GetVideoInfoResp, error)
	GetVideoList(context.Context, *GetVideoListReq) (*GetVideoListResp, error)
}

func RegisterVideoInfoHTTPServer(s *http.Server, srv VideoInfoHTTPServer) {
	r := s.Route("/")
	r.GET("/video/{video_id}/info", _VideoInfo_GetVideoInfo0_HTTP_Handler(srv))
	r.GET("/video/list", _VideoInfo_GetVideoList0_HTTP_Handler(srv))
}

func _VideoInfo_GetVideoInfo0_HTTP_Handler(srv VideoInfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetVideoInfoReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoInfoGetVideoInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetVideoInfo(ctx, req.(*GetVideoInfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetVideoInfoResp)
		return ctx.Result(200, reply)
	}
}

func _VideoInfo_GetVideoList0_HTTP_Handler(srv VideoInfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetVideoListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoInfoGetVideoList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetVideoList(ctx, req.(*GetVideoListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetVideoListResp)
		return ctx.Result(200, reply)
	}
}

type VideoInfoHTTPClient interface {
	GetVideoInfo(ctx context.Context, req *GetVideoInfoReq, opts ...http.CallOption) (rsp *GetVideoInfoResp, err error)
	GetVideoList(ctx context.Context, req *GetVideoListReq, opts ...http.CallOption) (rsp *GetVideoListResp, err error)
}

type VideoInfoHTTPClientImpl struct {
	cc *http.Client
}

func NewVideoInfoHTTPClient(client *http.Client) VideoInfoHTTPClient {
	return &VideoInfoHTTPClientImpl{client}
}

func (c *VideoInfoHTTPClientImpl) GetVideoInfo(ctx context.Context, in *GetVideoInfoReq, opts ...http.CallOption) (*GetVideoInfoResp, error) {
	var out GetVideoInfoResp
	pattern := "/video/{video_id}/info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationVideoInfoGetVideoInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoInfoHTTPClientImpl) GetVideoList(ctx context.Context, in *GetVideoListReq, opts ...http.CallOption) (*GetVideoListResp, error) {
	var out GetVideoListResp
	pattern := "/video/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationVideoInfoGetVideoList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
