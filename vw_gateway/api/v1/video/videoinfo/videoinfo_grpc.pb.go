// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.0
// source: v1/video/videoinfo/videoinfo.proto

package videoinfo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VideoInfo_GetMpd_FullMethodName           = "/gateway.api.v1.video.videoinfo.VideoInfo/GetMpd"
	VideoInfo_GetSegments_FullMethodName      = "/gateway.api.v1.video.videoinfo.VideoInfo/GetSegments"
	VideoInfo_GetVideoCover_FullMethodName    = "/gateway.api.v1.video.videoinfo.VideoInfo/GetVideoCover"
	VideoInfo_DownloadVideo_FullMethodName    = "/gateway.api.v1.video.videoinfo.VideoInfo/DownloadVideo"
	VideoInfo_UploadVideoInfo_FullMethodName  = "/gateway.api.v1.video.videoinfo.VideoInfo/UploadVideoInfo"
	VideoInfo_UploadVideoFile_FullMethodName  = "/gateway.api.v1.video.videoinfo.VideoInfo/UploadVideoFile"
	VideoInfo_UploadVideoCover_FullMethodName = "/gateway.api.v1.video.videoinfo.VideoInfo/UploadVideoCover"
	VideoInfo_GetVideoInfo_FullMethodName     = "/gateway.api.v1.video.videoinfo.VideoInfo/GetVideoInfo"
	VideoInfo_GetVideoList_FullMethodName     = "/gateway.api.v1.video.videoinfo.VideoInfo/GetVideoList"
)

// VideoInfoClient is the client API for VideoInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoInfoClient interface {
	GetMpd(ctx context.Context, in *ProvideMpdReq, opts ...grpc.CallOption) (*FileResp, error)
	GetSegments(ctx context.Context, in *ProvideSegmentsReq, opts ...grpc.CallOption) (*FileResp, error)
	GetVideoCover(ctx context.Context, in *GetVideoCoverReq, opts ...grpc.CallOption) (*FileResp, error)
	DownloadVideo(ctx context.Context, in *DownloadVideoReq, opts ...grpc.CallOption) (*FileResp, error)
	// Request Order: 1. UploadVideoInfo 2. UploadVideoFile 3. UploadVideoCover
	// 1(UploadVideoInfo) Will Create a new directory for the video,
	// 2(UploadVideoFile) and 3(UploadVideoCover) will upload the video file and cover file to the directory.
	// The order of 2 and 3 is not important.
	UploadVideoInfo(ctx context.Context, in *UploadVideoInfoReq, opts ...grpc.CallOption) (*UploadVideoInfoResp, error)
	UploadVideoFile(ctx context.Context, in *UploadVideoFileReq, opts ...grpc.CallOption) (*UploadVideoFileResp, error)
	UploadVideoCover(ctx context.Context, in *UploadVideoCoverReq, opts ...grpc.CallOption) (*UploadVideoCoverResp, error)
	GetVideoInfo(ctx context.Context, in *GetVideoInfoReq, opts ...grpc.CallOption) (*GetVideoInfoResp, error)
	GetVideoList(ctx context.Context, in *GetVideoListReq, opts ...grpc.CallOption) (*GetVideoListResp, error)
}

type videoInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoInfoClient(cc grpc.ClientConnInterface) VideoInfoClient {
	return &videoInfoClient{cc}
}

func (c *videoInfoClient) GetMpd(ctx context.Context, in *ProvideMpdReq, opts ...grpc.CallOption) (*FileResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileResp)
	err := c.cc.Invoke(ctx, VideoInfo_GetMpd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoInfoClient) GetSegments(ctx context.Context, in *ProvideSegmentsReq, opts ...grpc.CallOption) (*FileResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileResp)
	err := c.cc.Invoke(ctx, VideoInfo_GetSegments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoInfoClient) GetVideoCover(ctx context.Context, in *GetVideoCoverReq, opts ...grpc.CallOption) (*FileResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileResp)
	err := c.cc.Invoke(ctx, VideoInfo_GetVideoCover_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoInfoClient) DownloadVideo(ctx context.Context, in *DownloadVideoReq, opts ...grpc.CallOption) (*FileResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileResp)
	err := c.cc.Invoke(ctx, VideoInfo_DownloadVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoInfoClient) UploadVideoInfo(ctx context.Context, in *UploadVideoInfoReq, opts ...grpc.CallOption) (*UploadVideoInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadVideoInfoResp)
	err := c.cc.Invoke(ctx, VideoInfo_UploadVideoInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoInfoClient) UploadVideoFile(ctx context.Context, in *UploadVideoFileReq, opts ...grpc.CallOption) (*UploadVideoFileResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadVideoFileResp)
	err := c.cc.Invoke(ctx, VideoInfo_UploadVideoFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoInfoClient) UploadVideoCover(ctx context.Context, in *UploadVideoCoverReq, opts ...grpc.CallOption) (*UploadVideoCoverResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadVideoCoverResp)
	err := c.cc.Invoke(ctx, VideoInfo_UploadVideoCover_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoInfoClient) GetVideoInfo(ctx context.Context, in *GetVideoInfoReq, opts ...grpc.CallOption) (*GetVideoInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVideoInfoResp)
	err := c.cc.Invoke(ctx, VideoInfo_GetVideoInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoInfoClient) GetVideoList(ctx context.Context, in *GetVideoListReq, opts ...grpc.CallOption) (*GetVideoListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVideoListResp)
	err := c.cc.Invoke(ctx, VideoInfo_GetVideoList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoInfoServer is the server API for VideoInfo service.
// All implementations must embed UnimplementedVideoInfoServer
// for forward compatibility.
type VideoInfoServer interface {
	GetMpd(context.Context, *ProvideMpdReq) (*FileResp, error)
	GetSegments(context.Context, *ProvideSegmentsReq) (*FileResp, error)
	GetVideoCover(context.Context, *GetVideoCoverReq) (*FileResp, error)
	DownloadVideo(context.Context, *DownloadVideoReq) (*FileResp, error)
	// Request Order: 1. UploadVideoInfo 2. UploadVideoFile 3. UploadVideoCover
	// 1(UploadVideoInfo) Will Create a new directory for the video,
	// 2(UploadVideoFile) and 3(UploadVideoCover) will upload the video file and cover file to the directory.
	// The order of 2 and 3 is not important.
	UploadVideoInfo(context.Context, *UploadVideoInfoReq) (*UploadVideoInfoResp, error)
	UploadVideoFile(context.Context, *UploadVideoFileReq) (*UploadVideoFileResp, error)
	UploadVideoCover(context.Context, *UploadVideoCoverReq) (*UploadVideoCoverResp, error)
	GetVideoInfo(context.Context, *GetVideoInfoReq) (*GetVideoInfoResp, error)
	GetVideoList(context.Context, *GetVideoListReq) (*GetVideoListResp, error)
	mustEmbedUnimplementedVideoInfoServer()
}

// UnimplementedVideoInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVideoInfoServer struct{}

func (UnimplementedVideoInfoServer) GetMpd(context.Context, *ProvideMpdReq) (*FileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMpd not implemented")
}
func (UnimplementedVideoInfoServer) GetSegments(context.Context, *ProvideSegmentsReq) (*FileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegments not implemented")
}
func (UnimplementedVideoInfoServer) GetVideoCover(context.Context, *GetVideoCoverReq) (*FileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoCover not implemented")
}
func (UnimplementedVideoInfoServer) DownloadVideo(context.Context, *DownloadVideoReq) (*FileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadVideo not implemented")
}
func (UnimplementedVideoInfoServer) UploadVideoInfo(context.Context, *UploadVideoInfoReq) (*UploadVideoInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadVideoInfo not implemented")
}
func (UnimplementedVideoInfoServer) UploadVideoFile(context.Context, *UploadVideoFileReq) (*UploadVideoFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadVideoFile not implemented")
}
func (UnimplementedVideoInfoServer) UploadVideoCover(context.Context, *UploadVideoCoverReq) (*UploadVideoCoverResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadVideoCover not implemented")
}
func (UnimplementedVideoInfoServer) GetVideoInfo(context.Context, *GetVideoInfoReq) (*GetVideoInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoInfo not implemented")
}
func (UnimplementedVideoInfoServer) GetVideoList(context.Context, *GetVideoListReq) (*GetVideoListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoList not implemented")
}
func (UnimplementedVideoInfoServer) mustEmbedUnimplementedVideoInfoServer() {}
func (UnimplementedVideoInfoServer) testEmbeddedByValue()                   {}

// UnsafeVideoInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoInfoServer will
// result in compilation errors.
type UnsafeVideoInfoServer interface {
	mustEmbedUnimplementedVideoInfoServer()
}

func RegisterVideoInfoServer(s grpc.ServiceRegistrar, srv VideoInfoServer) {
	// If the following call pancis, it indicates UnimplementedVideoInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VideoInfo_ServiceDesc, srv)
}

func _VideoInfo_GetMpd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvideMpdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInfoServer).GetMpd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInfo_GetMpd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInfoServer).GetMpd(ctx, req.(*ProvideMpdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoInfo_GetSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvideSegmentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInfoServer).GetSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInfo_GetSegments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInfoServer).GetSegments(ctx, req.(*ProvideSegmentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoInfo_GetVideoCover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoCoverReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInfoServer).GetVideoCover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInfo_GetVideoCover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInfoServer).GetVideoCover(ctx, req.(*GetVideoCoverReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoInfo_DownloadVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInfoServer).DownloadVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInfo_DownloadVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInfoServer).DownloadVideo(ctx, req.(*DownloadVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoInfo_UploadVideoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadVideoInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInfoServer).UploadVideoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInfo_UploadVideoInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInfoServer).UploadVideoInfo(ctx, req.(*UploadVideoInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoInfo_UploadVideoFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadVideoFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInfoServer).UploadVideoFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInfo_UploadVideoFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInfoServer).UploadVideoFile(ctx, req.(*UploadVideoFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoInfo_UploadVideoCover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadVideoCoverReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInfoServer).UploadVideoCover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInfo_UploadVideoCover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInfoServer).UploadVideoCover(ctx, req.(*UploadVideoCoverReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoInfo_GetVideoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInfoServer).GetVideoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInfo_GetVideoInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInfoServer).GetVideoInfo(ctx, req.(*GetVideoInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoInfo_GetVideoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInfoServer).GetVideoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInfo_GetVideoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInfoServer).GetVideoList(ctx, req.(*GetVideoListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoInfo_ServiceDesc is the grpc.ServiceDesc for VideoInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.api.v1.video.videoinfo.VideoInfo",
	HandlerType: (*VideoInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMpd",
			Handler:    _VideoInfo_GetMpd_Handler,
		},
		{
			MethodName: "GetSegments",
			Handler:    _VideoInfo_GetSegments_Handler,
		},
		{
			MethodName: "GetVideoCover",
			Handler:    _VideoInfo_GetVideoCover_Handler,
		},
		{
			MethodName: "DownloadVideo",
			Handler:    _VideoInfo_DownloadVideo_Handler,
		},
		{
			MethodName: "UploadVideoInfo",
			Handler:    _VideoInfo_UploadVideoInfo_Handler,
		},
		{
			MethodName: "UploadVideoFile",
			Handler:    _VideoInfo_UploadVideoFile_Handler,
		},
		{
			MethodName: "UploadVideoCover",
			Handler:    _VideoInfo_UploadVideoCover_Handler,
		},
		{
			MethodName: "GetVideoInfo",
			Handler:    _VideoInfo_GetVideoInfo_Handler,
		},
		{
			MethodName: "GetVideoList",
			Handler:    _VideoInfo_GetVideoList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/video/videoinfo/videoinfo.proto",
}
