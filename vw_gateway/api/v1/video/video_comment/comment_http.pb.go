// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v5.27.0
// source: v1/video/video_comment/comment.proto

package video_comment

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationVideoCommentCommentVideo = "/gateway.api.v1.video.comment.VideoComment/CommentVideo"
const OperationVideoCommentGetCommentList = "/gateway.api.v1.video.comment.VideoComment/GetCommentList"
const OperationVideoCommentGetCommentReplies = "/gateway.api.v1.video.comment.VideoComment/GetCommentReplies"
const OperationVideoCommentUpvoteComment = "/gateway.api.v1.video.comment.VideoComment/UpvoteComment"

type VideoCommentHTTPServer interface {
	CommentVideo(context.Context, *CommentVideoReq) (*CommentVideoResp, error)
	GetCommentList(context.Context, *GetCommentListReq) (*GetCommentListResp, error)
	GetCommentReplies(context.Context, *GetCommentRepliesReq) (*GetCommentRepliesResp, error)
	UpvoteComment(context.Context, *UpvoteCommentReq) (*UpvoteCommentResp, error)
}

func RegisterVideoCommentHTTPServer(s *http.Server, srv VideoCommentHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/video/{video_id}/comment", _VideoComment_CommentVideo0_HTTP_Handler(srv))
	r.GET("/api/v1/video/{video_id}/comment", _VideoComment_GetCommentList0_HTTP_Handler(srv))
	r.GET("/api/v1/video/{video_id}/comments/{comment_id}/replies", _VideoComment_GetCommentReplies0_HTTP_Handler(srv))
	r.PUT("/api/v1/video/{video_id}/comment/{comment_id}/upvote", _VideoComment_UpvoteComment0_HTTP_Handler(srv))
}

func _VideoComment_CommentVideo0_HTTP_Handler(srv VideoCommentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CommentVideoReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoCommentCommentVideo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CommentVideo(ctx, req.(*CommentVideoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CommentVideoResp)
		return ctx.Result(200, reply)
	}
}

func _VideoComment_GetCommentList0_HTTP_Handler(srv VideoCommentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCommentListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoCommentGetCommentList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCommentList(ctx, req.(*GetCommentListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCommentListResp)
		return ctx.Result(200, reply)
	}
}

func _VideoComment_GetCommentReplies0_HTTP_Handler(srv VideoCommentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCommentRepliesReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoCommentGetCommentReplies)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCommentReplies(ctx, req.(*GetCommentRepliesReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCommentRepliesResp)
		return ctx.Result(200, reply)
	}
}

func _VideoComment_UpvoteComment0_HTTP_Handler(srv VideoCommentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpvoteCommentReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoCommentUpvoteComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpvoteComment(ctx, req.(*UpvoteCommentReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpvoteCommentResp)
		return ctx.Result(200, reply)
	}
}

type VideoCommentHTTPClient interface {
	CommentVideo(ctx context.Context, req *CommentVideoReq, opts ...http.CallOption) (rsp *CommentVideoResp, err error)
	GetCommentList(ctx context.Context, req *GetCommentListReq, opts ...http.CallOption) (rsp *GetCommentListResp, err error)
	GetCommentReplies(ctx context.Context, req *GetCommentRepliesReq, opts ...http.CallOption) (rsp *GetCommentRepliesResp, err error)
	UpvoteComment(ctx context.Context, req *UpvoteCommentReq, opts ...http.CallOption) (rsp *UpvoteCommentResp, err error)
}

type VideoCommentHTTPClientImpl struct {
	cc *http.Client
}

func NewVideoCommentHTTPClient(client *http.Client) VideoCommentHTTPClient {
	return &VideoCommentHTTPClientImpl{client}
}

func (c *VideoCommentHTTPClientImpl) CommentVideo(ctx context.Context, in *CommentVideoReq, opts ...http.CallOption) (*CommentVideoResp, error) {
	var out CommentVideoResp
	pattern := "/api/v1/video/{video_id}/comment"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoCommentCommentVideo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoCommentHTTPClientImpl) GetCommentList(ctx context.Context, in *GetCommentListReq, opts ...http.CallOption) (*GetCommentListResp, error) {
	var out GetCommentListResp
	pattern := "/api/v1/video/{video_id}/comment"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationVideoCommentGetCommentList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoCommentHTTPClientImpl) GetCommentReplies(ctx context.Context, in *GetCommentRepliesReq, opts ...http.CallOption) (*GetCommentRepliesResp, error) {
	var out GetCommentRepliesResp
	pattern := "/api/v1/video/{video_id}/comments/{comment_id}/replies"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationVideoCommentGetCommentReplies))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoCommentHTTPClientImpl) UpvoteComment(ctx context.Context, in *UpvoteCommentReq, opts ...http.CallOption) (*UpvoteCommentResp, error) {
	var out UpvoteCommentResp
	pattern := "/api/v1/video/{video_id}/comment/{comment_id}/upvote"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoCommentUpvoteComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
