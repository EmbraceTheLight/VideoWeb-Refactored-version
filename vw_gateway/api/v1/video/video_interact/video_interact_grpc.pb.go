// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.0
// source: v1/video/video_interact/video_interact.proto

package interact

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VideoInteract_VideoUpvote_FullMethodName        = "/gateway.api.v1.video.interact.VideoInteract/VideoUpvote"
	VideoInteract_VideoFavorite_FullMethodName      = "/gateway.api.v1.video.interact.VideoInteract/VideoFavorite"
	VideoInteract_VideoThrowShells_FullMethodName   = "/gateway.api.v1.video.interact.VideoInteract/VideoThrowShells"
	VideoInteract_VideoShare_FullMethodName         = "/gateway.api.v1.video.interact.VideoInteract/VideoShare"
	VideoInteract_VideoSendBarrage_FullMethodName   = "/gateway.api.v1.video.interact.VideoInteract/VideoSendBarrage"
	VideoInteract_VideoUpvoteBarrage_FullMethodName = "/gateway.api.v1.video.interact.VideoInteract/VideoUpvoteBarrage"
)

// VideoInteractClient is the client API for VideoInteract service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoInteractClient interface {
	VideoUpvote(ctx context.Context, in *VideoUpvoteReq, opts ...grpc.CallOption) (*VideoUpvoteResp, error)
	VideoFavorite(ctx context.Context, in *VideoFavoriteReq, opts ...grpc.CallOption) (*VideoFavoriteResp, error)
	VideoThrowShells(ctx context.Context, in *VideoThrowShellsReq, opts ...grpc.CallOption) (*VideoThrowShellsResp, error)
	VideoShare(ctx context.Context, in *VideoShareReq, opts ...grpc.CallOption) (*VideoShareResp, error)
	VideoSendBarrage(ctx context.Context, in *VideoSendBarrageReq, opts ...grpc.CallOption) (*VideoSendBarrageResp, error)
	VideoUpvoteBarrage(ctx context.Context, in *VideoUpvoteBarrageReq, opts ...grpc.CallOption) (*VideoUpvoteBarrageResp, error)
}

type videoInteractClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoInteractClient(cc grpc.ClientConnInterface) VideoInteractClient {
	return &videoInteractClient{cc}
}

func (c *videoInteractClient) VideoUpvote(ctx context.Context, in *VideoUpvoteReq, opts ...grpc.CallOption) (*VideoUpvoteResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VideoUpvoteResp)
	err := c.cc.Invoke(ctx, VideoInteract_VideoUpvote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoInteractClient) VideoFavorite(ctx context.Context, in *VideoFavoriteReq, opts ...grpc.CallOption) (*VideoFavoriteResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VideoFavoriteResp)
	err := c.cc.Invoke(ctx, VideoInteract_VideoFavorite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoInteractClient) VideoThrowShells(ctx context.Context, in *VideoThrowShellsReq, opts ...grpc.CallOption) (*VideoThrowShellsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VideoThrowShellsResp)
	err := c.cc.Invoke(ctx, VideoInteract_VideoThrowShells_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoInteractClient) VideoShare(ctx context.Context, in *VideoShareReq, opts ...grpc.CallOption) (*VideoShareResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VideoShareResp)
	err := c.cc.Invoke(ctx, VideoInteract_VideoShare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoInteractClient) VideoSendBarrage(ctx context.Context, in *VideoSendBarrageReq, opts ...grpc.CallOption) (*VideoSendBarrageResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VideoSendBarrageResp)
	err := c.cc.Invoke(ctx, VideoInteract_VideoSendBarrage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoInteractClient) VideoUpvoteBarrage(ctx context.Context, in *VideoUpvoteBarrageReq, opts ...grpc.CallOption) (*VideoUpvoteBarrageResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VideoUpvoteBarrageResp)
	err := c.cc.Invoke(ctx, VideoInteract_VideoUpvoteBarrage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoInteractServer is the server API for VideoInteract service.
// All implementations must embed UnimplementedVideoInteractServer
// for forward compatibility.
type VideoInteractServer interface {
	VideoUpvote(context.Context, *VideoUpvoteReq) (*VideoUpvoteResp, error)
	VideoFavorite(context.Context, *VideoFavoriteReq) (*VideoFavoriteResp, error)
	VideoThrowShells(context.Context, *VideoThrowShellsReq) (*VideoThrowShellsResp, error)
	VideoShare(context.Context, *VideoShareReq) (*VideoShareResp, error)
	VideoSendBarrage(context.Context, *VideoSendBarrageReq) (*VideoSendBarrageResp, error)
	VideoUpvoteBarrage(context.Context, *VideoUpvoteBarrageReq) (*VideoUpvoteBarrageResp, error)
	mustEmbedUnimplementedVideoInteractServer()
}

// UnimplementedVideoInteractServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVideoInteractServer struct{}

func (UnimplementedVideoInteractServer) VideoUpvote(context.Context, *VideoUpvoteReq) (*VideoUpvoteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoUpvote not implemented")
}
func (UnimplementedVideoInteractServer) VideoFavorite(context.Context, *VideoFavoriteReq) (*VideoFavoriteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoFavorite not implemented")
}
func (UnimplementedVideoInteractServer) VideoThrowShells(context.Context, *VideoThrowShellsReq) (*VideoThrowShellsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoThrowShells not implemented")
}
func (UnimplementedVideoInteractServer) VideoShare(context.Context, *VideoShareReq) (*VideoShareResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoShare not implemented")
}
func (UnimplementedVideoInteractServer) VideoSendBarrage(context.Context, *VideoSendBarrageReq) (*VideoSendBarrageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoSendBarrage not implemented")
}
func (UnimplementedVideoInteractServer) VideoUpvoteBarrage(context.Context, *VideoUpvoteBarrageReq) (*VideoUpvoteBarrageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoUpvoteBarrage not implemented")
}
func (UnimplementedVideoInteractServer) mustEmbedUnimplementedVideoInteractServer() {}
func (UnimplementedVideoInteractServer) testEmbeddedByValue()                       {}

// UnsafeVideoInteractServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoInteractServer will
// result in compilation errors.
type UnsafeVideoInteractServer interface {
	mustEmbedUnimplementedVideoInteractServer()
}

func RegisterVideoInteractServer(s grpc.ServiceRegistrar, srv VideoInteractServer) {
	// If the following call pancis, it indicates UnimplementedVideoInteractServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VideoInteract_ServiceDesc, srv)
}

func _VideoInteract_VideoUpvote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoUpvoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInteractServer).VideoUpvote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInteract_VideoUpvote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInteractServer).VideoUpvote(ctx, req.(*VideoUpvoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoInteract_VideoFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoFavoriteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInteractServer).VideoFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInteract_VideoFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInteractServer).VideoFavorite(ctx, req.(*VideoFavoriteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoInteract_VideoThrowShells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoThrowShellsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInteractServer).VideoThrowShells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInteract_VideoThrowShells_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInteractServer).VideoThrowShells(ctx, req.(*VideoThrowShellsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoInteract_VideoShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoShareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInteractServer).VideoShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInteract_VideoShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInteractServer).VideoShare(ctx, req.(*VideoShareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoInteract_VideoSendBarrage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoSendBarrageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInteractServer).VideoSendBarrage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInteract_VideoSendBarrage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInteractServer).VideoSendBarrage(ctx, req.(*VideoSendBarrageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoInteract_VideoUpvoteBarrage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoUpvoteBarrageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInteractServer).VideoUpvoteBarrage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoInteract_VideoUpvoteBarrage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInteractServer).VideoUpvoteBarrage(ctx, req.(*VideoUpvoteBarrageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoInteract_ServiceDesc is the grpc.ServiceDesc for VideoInteract service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoInteract_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.api.v1.video.interact.VideoInteract",
	HandlerType: (*VideoInteractServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VideoUpvote",
			Handler:    _VideoInteract_VideoUpvote_Handler,
		},
		{
			MethodName: "VideoFavorite",
			Handler:    _VideoInteract_VideoFavorite_Handler,
		},
		{
			MethodName: "VideoThrowShells",
			Handler:    _VideoInteract_VideoThrowShells_Handler,
		},
		{
			MethodName: "VideoShare",
			Handler:    _VideoInteract_VideoShare_Handler,
		},
		{
			MethodName: "VideoSendBarrage",
			Handler:    _VideoInteract_VideoSendBarrage_Handler,
		},
		{
			MethodName: "VideoUpvoteBarrage",
			Handler:    _VideoInteract_VideoUpvoteBarrage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/video/video_interact/video_interact.proto",
}
