// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v5.27.0
// source: v1/video/video_interact/video_interact.proto

package interact

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationVideoInteractVideoFavorite = "/gateway.api.v1.video.interact.VideoInteract/VideoFavorite"
const OperationVideoInteractVideoSendBarrage = "/gateway.api.v1.video.interact.VideoInteract/VideoSendBarrage"
const OperationVideoInteractVideoShare = "/gateway.api.v1.video.interact.VideoInteract/VideoShare"
const OperationVideoInteractVideoThrowShells = "/gateway.api.v1.video.interact.VideoInteract/VideoThrowShells"
const OperationVideoInteractVideoUpvote = "/gateway.api.v1.video.interact.VideoInteract/VideoUpvote"
const OperationVideoInteractVideoUpvoteBarrage = "/gateway.api.v1.video.interact.VideoInteract/VideoUpvoteBarrage"

type VideoInteractHTTPServer interface {
	VideoFavorite(context.Context, *VideoFavoriteReq) (*VideoFavoriteResp, error)
	VideoSendBarrage(context.Context, *VideoSendBarrageReq) (*VideoSendBarrageResp, error)
	VideoShare(context.Context, *VideoShareReq) (*VideoShareResp, error)
	VideoThrowShells(context.Context, *VideoThrowShellsReq) (*VideoThrowShellsResp, error)
	VideoUpvote(context.Context, *VideoUpvoteReq) (*VideoUpvoteResp, error)
	VideoUpvoteBarrage(context.Context, *VideoUpvoteBarrageReq) (*VideoUpvoteBarrageResp, error)
}

func RegisterVideoInteractHTTPServer(s *http.Server, srv VideoInteractHTTPServer) {
	r := s.Route("/")
	r.PUT("/api/v1/video/interaction/{video_id}/upvote", _VideoInteract_VideoUpvote0_HTTP_Handler(srv))
	r.PUT("/api/v1/video/interaction/{video_id}/favorite", _VideoInteract_VideoFavorite0_HTTP_Handler(srv))
	r.PUT("/api/v1/video/interaction/{video_id}/throwShells", _VideoInteract_VideoThrowShells0_HTTP_Handler(srv))
	r.GET("/api/v1/video/interaction/{video_id}/share", _VideoInteract_VideoShare0_HTTP_Handler(srv))
	r.POST("/api/v1/video/interaction/{video_id}/barrage/send", _VideoInteract_VideoSendBarrage0_HTTP_Handler(srv))
	r.PUT("/api/v1/video/interaction/{video_id}/barrage/upvote", _VideoInteract_VideoUpvoteBarrage0_HTTP_Handler(srv))
}

func _VideoInteract_VideoUpvote0_HTTP_Handler(srv VideoInteractHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VideoUpvoteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoInteractVideoUpvote)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.VideoUpvote(ctx, req.(*VideoUpvoteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VideoUpvoteResp)
		return ctx.Result(200, reply)
	}
}

func _VideoInteract_VideoFavorite0_HTTP_Handler(srv VideoInteractHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VideoFavoriteReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoInteractVideoFavorite)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.VideoFavorite(ctx, req.(*VideoFavoriteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VideoFavoriteResp)
		return ctx.Result(200, reply)
	}
}

func _VideoInteract_VideoThrowShells0_HTTP_Handler(srv VideoInteractHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VideoThrowShellsReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoInteractVideoThrowShells)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.VideoThrowShells(ctx, req.(*VideoThrowShellsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VideoThrowShellsResp)
		return ctx.Result(200, reply)
	}
}

func _VideoInteract_VideoShare0_HTTP_Handler(srv VideoInteractHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VideoShareReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoInteractVideoShare)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.VideoShare(ctx, req.(*VideoShareReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VideoShareResp)
		return ctx.Result(200, reply)
	}
}

func _VideoInteract_VideoSendBarrage0_HTTP_Handler(srv VideoInteractHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VideoSendBarrageReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoInteractVideoSendBarrage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.VideoSendBarrage(ctx, req.(*VideoSendBarrageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VideoSendBarrageResp)
		return ctx.Result(200, reply)
	}
}

func _VideoInteract_VideoUpvoteBarrage0_HTTP_Handler(srv VideoInteractHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VideoUpvoteBarrageReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoInteractVideoUpvoteBarrage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.VideoUpvoteBarrage(ctx, req.(*VideoUpvoteBarrageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VideoUpvoteBarrageResp)
		return ctx.Result(200, reply)
	}
}

type VideoInteractHTTPClient interface {
	VideoFavorite(ctx context.Context, req *VideoFavoriteReq, opts ...http.CallOption) (rsp *VideoFavoriteResp, err error)
	VideoSendBarrage(ctx context.Context, req *VideoSendBarrageReq, opts ...http.CallOption) (rsp *VideoSendBarrageResp, err error)
	VideoShare(ctx context.Context, req *VideoShareReq, opts ...http.CallOption) (rsp *VideoShareResp, err error)
	VideoThrowShells(ctx context.Context, req *VideoThrowShellsReq, opts ...http.CallOption) (rsp *VideoThrowShellsResp, err error)
	VideoUpvote(ctx context.Context, req *VideoUpvoteReq, opts ...http.CallOption) (rsp *VideoUpvoteResp, err error)
	VideoUpvoteBarrage(ctx context.Context, req *VideoUpvoteBarrageReq, opts ...http.CallOption) (rsp *VideoUpvoteBarrageResp, err error)
}

type VideoInteractHTTPClientImpl struct {
	cc *http.Client
}

func NewVideoInteractHTTPClient(client *http.Client) VideoInteractHTTPClient {
	return &VideoInteractHTTPClientImpl{client}
}

func (c *VideoInteractHTTPClientImpl) VideoFavorite(ctx context.Context, in *VideoFavoriteReq, opts ...http.CallOption) (*VideoFavoriteResp, error) {
	var out VideoFavoriteResp
	pattern := "/api/v1/video/interaction/{video_id}/favorite"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoInteractVideoFavorite))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoInteractHTTPClientImpl) VideoSendBarrage(ctx context.Context, in *VideoSendBarrageReq, opts ...http.CallOption) (*VideoSendBarrageResp, error) {
	var out VideoSendBarrageResp
	pattern := "/api/v1/video/interaction/{video_id}/barrage/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoInteractVideoSendBarrage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoInteractHTTPClientImpl) VideoShare(ctx context.Context, in *VideoShareReq, opts ...http.CallOption) (*VideoShareResp, error) {
	var out VideoShareResp
	pattern := "/api/v1/video/interaction/{video_id}/share"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationVideoInteractVideoShare))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoInteractHTTPClientImpl) VideoThrowShells(ctx context.Context, in *VideoThrowShellsReq, opts ...http.CallOption) (*VideoThrowShellsResp, error) {
	var out VideoThrowShellsResp
	pattern := "/api/v1/video/interaction/{video_id}/throwShells"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoInteractVideoThrowShells))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoInteractHTTPClientImpl) VideoUpvote(ctx context.Context, in *VideoUpvoteReq, opts ...http.CallOption) (*VideoUpvoteResp, error) {
	var out VideoUpvoteResp
	pattern := "/api/v1/video/interaction/{video_id}/upvote"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoInteractVideoUpvote))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoInteractHTTPClientImpl) VideoUpvoteBarrage(ctx context.Context, in *VideoUpvoteBarrageReq, opts ...http.CallOption) (*VideoUpvoteBarrageResp, error) {
	var out VideoUpvoteBarrageResp
	pattern := "/api/v1/video/interaction/{video_id}/barrage/upvote"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoInteractVideoUpvoteBarrage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
