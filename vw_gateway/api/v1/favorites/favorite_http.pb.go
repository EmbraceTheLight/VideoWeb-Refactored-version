// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v5.27.0
// source: v1/favorites/favorite.proto

package favorv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationFavoriteCreateFavorites = "/vw_gateway.api.v1.favorites.Favorite/CreateFavorites"
const OperationFavoriteDeleteFavorites = "/vw_gateway.api.v1.favorites.Favorite/DeleteFavorites"
const OperationFavoriteModifyFavorites = "/vw_gateway.api.v1.favorites.Favorite/ModifyFavorites"

type FavoriteHTTPServer interface {
	CreateFavorites(context.Context, *CreateFavoritesReq) (*CreateFavoritesResp, error)
	DeleteFavorites(context.Context, *DeleteFavoritesReq) (*DeleteFavoritesResp, error)
	ModifyFavorites(context.Context, *ModifyFavoritesReq) (*ModifyFavoritesResp, error)
}

func RegisterFavoriteHTTPServer(s *http.Server, srv FavoriteHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/favorites", _Favorite_CreateFavorites0_HTTP_Handler(srv))
	r.PATCH("/api/v1/favorites/{favorites_id}", _Favorite_ModifyFavorites0_HTTP_Handler(srv))
	r.DELETE("/api/v1/favorites/{favorites_id}", _Favorite_DeleteFavorites0_HTTP_Handler(srv))
}

func _Favorite_CreateFavorites0_HTTP_Handler(srv FavoriteHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateFavoritesReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFavoriteCreateFavorites)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateFavorites(ctx, req.(*CreateFavoritesReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateFavoritesResp)
		return ctx.Result(200, reply)
	}
}

func _Favorite_ModifyFavorites0_HTTP_Handler(srv FavoriteHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ModifyFavoritesReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFavoriteModifyFavorites)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ModifyFavorites(ctx, req.(*ModifyFavoritesReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ModifyFavoritesResp)
		return ctx.Result(200, reply)
	}
}

func _Favorite_DeleteFavorites0_HTTP_Handler(srv FavoriteHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteFavoritesReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFavoriteDeleteFavorites)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteFavorites(ctx, req.(*DeleteFavoritesReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteFavoritesResp)
		return ctx.Result(200, reply)
	}
}

type FavoriteHTTPClient interface {
	CreateFavorites(ctx context.Context, req *CreateFavoritesReq, opts ...http.CallOption) (rsp *CreateFavoritesResp, err error)
	DeleteFavorites(ctx context.Context, req *DeleteFavoritesReq, opts ...http.CallOption) (rsp *DeleteFavoritesResp, err error)
	ModifyFavorites(ctx context.Context, req *ModifyFavoritesReq, opts ...http.CallOption) (rsp *ModifyFavoritesResp, err error)
}

type FavoriteHTTPClientImpl struct {
	cc *http.Client
}

func NewFavoriteHTTPClient(client *http.Client) FavoriteHTTPClient {
	return &FavoriteHTTPClientImpl{client}
}

func (c *FavoriteHTTPClientImpl) CreateFavorites(ctx context.Context, in *CreateFavoritesReq, opts ...http.CallOption) (*CreateFavoritesResp, error) {
	var out CreateFavoritesResp
	pattern := "/api/v1/favorites"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFavoriteCreateFavorites))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *FavoriteHTTPClientImpl) DeleteFavorites(ctx context.Context, in *DeleteFavoritesReq, opts ...http.CallOption) (*DeleteFavoritesResp, error) {
	var out DeleteFavoritesResp
	pattern := "/api/v1/favorites/{favorites_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFavoriteDeleteFavorites))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *FavoriteHTTPClientImpl) ModifyFavorites(ctx context.Context, in *ModifyFavoritesReq, opts ...http.CallOption) (*ModifyFavoritesResp, error) {
	var out ModifyFavoritesResp
	pattern := "/api/v1/favorites/{favorites_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFavoriteModifyFavorites))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
